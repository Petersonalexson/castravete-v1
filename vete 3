Option Explicit

'==========================================================
' DIRECT COMPARISON OF PARENTS BETWEEN SMARTVIEW AND XRP
' Gets array names from Lists sheet (E3 and E5)
' Compatible with arrays created by ImportXRPDataAsArrays
'==========================================================
Public Sub CompareParentsDirectly()
    ' This procedure directly compares parents between SmartViewData and XRP arrays
    ' Logs to ProcessLog3 and outputs to the first sheet
    
    ' Variable declarations
    Dim wsOutput As Worksheet
    Dim wsProcessLog As Worksheet
    Dim wsSVData As Worksheet
    Dim wsLists As Worksheet
    Dim logRow As Long
    Dim svDataRange As Range
    Dim svDataLO As ListObject
    Dim treeArray As Variant
    Dim listArray As Variant
    Dim i As Long, j As Long, k As Long
    Dim outputRow As Long
    Dim svHierarchy As String, svType As String, svVSC As String, svValue As String, svParent As String
    Dim svKey As String
    Dim xrpParent As String
    Dim matchFound As Boolean
    Dim status As String
    Dim ws As Worksheet
    Dim lo As ListObject
    Dim compareKey As String
    Dim treeKey As String
    Dim listKey As String
    
    ' Get array names from Lists sheet
    On Error Resume Next
    Set wsLists = ThisWorkbook.Sheets("Lists")
    If wsLists Is Nothing Then
        MsgBox "Could not find the Lists sheet. Please ensure it exists.", vbExclamation
        Exit Sub
    End If
    
    Dim TREE_ARRAY_NAME As String
    Dim LIST_ARRAY_NAME As String
    
    TREE_ARRAY_NAME = wsLists.Range("E3").Value
    LIST_ARRAY_NAME = wsLists.Range("E5").Value
    
    If TREE_ARRAY_NAME = "" Or LIST_ARRAY_NAME = "" Then
        MsgBox "Array names not found in cells E3 and E5 of Lists sheet. Please check the cells.", vbExclamation
        Exit Sub
    End If
    On Error GoTo 0
    
    ' Create or get ProcessLog3 sheet
    On Error Resume Next
    Set wsProcessLog = ThisWorkbook.Sheets("ProcessLog3")
    If wsProcessLog Is Nothing Then
        Set wsProcessLog = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsProcessLog.Name = "ProcessLog3"
        With wsProcessLog
            .Range("A1") = "Timestamp"
            .Range("B1") = "Source"
            .Range("C1") = "Action"
            .Range("D1") = "Status"
            .Range("E1") = "Details"
            .Range("A1:E1").Font.Bold = True
        End With
    End If
    On Error GoTo 0
    
    ' Start logging
    logRow = wsProcessLog.Cells(wsProcessLog.Rows.Count, "A").End(xlUp).Row + 1
    With wsProcessLog
        .Cells(logRow, 1) = Now
        .Cells(logRow, 2) = "System"
        .Cells(logRow, 3) = "Process Started"
        .Cells(logRow, 4) = "INFO"
        .Cells(logRow, 5) = "Starting direct parent comparison using arrays: " & TREE_ARRAY_NAME & " and " & LIST_ARRAY_NAME
    End With
    logRow = logRow + 1
    
    ' Create or reset the output sheet as the first sheet
    On Error Resume Next
    Set wsOutput = ThisWorkbook.Worksheets("ParentComparison")
    If wsOutput Is Nothing Then
        Set wsOutput = ThisWorkbook.Sheets.Add(Before:=ThisWorkbook.Sheets(1))
        wsOutput.Name = "ParentComparison"
    Else
        wsOutput.Cells.Clear
    End If
    On Error GoTo 0
    
    ' Format the output sheet title
    With wsOutput
        .Range("A1").Value = "SmartView vs. XRP Parent Comparison"
        .Range("A1").Font.Size = 16
        .Range("A1").Font.Bold = True
        .Range("A2").Value = "Generated: " & Format(Now(), "yyyy-mm-dd hh:mm:ss")
        .Range("A1:A2").Interior.Color = RGB(220, 230, 241)
    End With
    
    ' Create the header row
    With wsOutput
        .Range("A4").Value = "Type"
        .Range("B4").Value = "V_S_C"
        .Range("C4").Value = "Hierarchy Name"
        .Range("D4").Value = "Value"
        .Range("E4").Value = "SmartView Parent"
        .Range("F4").Value = "XRP Parent"
        .Range("G4").Value = "Status"
        .Range("A4:G4").Font.Bold = True
        .Range("A4:G4").Interior.Color = RGB(200, 200, 200)
    End With
    
    ' Initialize output row
    outputRow = 5
    
    ' Log getting arrays
    With wsProcessLog
        .Cells(logRow, 1) = Now
        .Cells(logRow, 2) = "System"
        .Cells(logRow, 3) = "Getting Arrays"
        .Cells(logRow, 4) = "INFO"
        .Cells(logRow, 5) = "Retrieving XRP arrays: " & TREE_ARRAY_NAME & " and " & LIST_ARRAY_NAME
    End With
    logRow = logRow + 1
    
    ' Get XRP arrays
    On Error Resume Next
    If ThisWorkbook.Names.Item(TREE_ARRAY_NAME) Is Nothing Then
        With wsProcessLog
            .Cells(logRow, 1) = Now
            .Cells(logRow, 2) = "System"
            .Cells(logRow, 3) = "Array Error"
            .Cells(logRow, 4) = "ERROR"
            .Cells(logRow, 5) = "Could not find " & TREE_ARRAY_NAME & ". Make sure you've imported the data first."
        End With
        logRow = logRow + 1
        MsgBox "Could not find " & TREE_ARRAY_NAME & ". Please run ImportXRPDataAsArrays first.", vbExclamation
        Exit Sub
    End If
    
    If ThisWorkbook.Names.Item(LIST_ARRAY_NAME) Is Nothing Then
        With wsProcessLog
            .Cells(logRow, 1) = Now
            .Cells(logRow, 2) = "System"
            .Cells(logRow, 3) = "Array Error"
            .Cells(logRow, 4) = "ERROR"
            .Cells(logRow, 5) = "Could not find " & LIST_ARRAY_NAME & ". Make sure you've imported the data first."
        End With
        logRow = logRow + 1
        MsgBox "Could not find " & LIST_ARRAY_NAME & ". Please run ImportXRPDataAsArrays first.", vbExclamation
        Exit Sub
    End If
    
    ' Get the arrays as variant arrays
    treeArray = ThisWorkbook.Names(TREE_ARRAY_NAME).RefersToRange.Value
    listArray = ThisWorkbook.Names(LIST_ARRAY_NAME).RefersToRange.Value
    On Error GoTo 0
    
    ' Find SmartViewData table
    ' This is sourced from Power Query, so we need to find which sheet it's on
    Set svDataLO = Nothing
    For Each ws In ThisWorkbook.Worksheets
        For Each lo In ws.ListObjects
            If lo.Name = "SmartViewData" Then
                Set svDataLO = lo
                Set wsSVData = ws
                Exit For
            End If
        Next lo
        If Not svDataLO Is Nothing Then Exit For
    Next ws
    
    If svDataLO Is Nothing Then
        ' If the SmartViewData table doesn't exist, log error and exit
        With wsProcessLog
            .Cells(logRow, 1) = Now
            .Cells(logRow, 2) = "System"
            .Cells(logRow, 3) = "Table Error"
            .Cells(logRow, 4) = "ERROR"
            .Cells(logRow, 5) = "Could not find SmartViewData table. Make sure Power Query output is loaded."
        End With
        logRow = logRow + 1
        MsgBox "Could not find SmartViewData table. Please ensure the Power Query output is loaded as a table named 'SmartViewData'.", vbExclamation
        Exit Sub
    End If
    
    ' Log starting comparison
    With wsProcessLog
        .Cells(logRow, 1) = Now
        .Cells(logRow, 2) = "System"
        .Cells(logRow, 3) = "Starting Comparison"
        .Cells(logRow, 4) = "INFO"
        .Cells(logRow, 5) = "Beginning comparison of SmartViewData with XRP arrays"
    End With
    logRow = logRow + 1
    
    ' Get column indexes for SmartViewData
    Dim svTypeCol As Long, svVSCCol As Long, svHierarchyCol As Long, svValueCol As Long, svParentCol As Long, svKeyCol As Long
    For i = 1 To svDataLO.HeaderRowRange.Columns.Count
        Select Case svDataLO.HeaderRowRange.Cells(1, i).Value
            Case "Type"
                svTypeCol = i
            Case "V_S_C"
                svVSCCol = i
            Case "Hierarchy Name"
                svHierarchyCol = i
            Case "Value"
                svValueCol = i
            Case "Parent"
                svParentCol = i
            Case "KEY"
                svKeyCol = i
        End Select
    Next i
    
    ' Check if we found all the required columns
    If svTypeCol = 0 Or svVSCCol = 0 Or svHierarchyCol = 0 Or svValueCol = 0 Or svParentCol = 0 Then
        With wsProcessLog
            .Cells(logRow, 1) = Now
            .Cells(logRow, 2) = "System"
            .Cells(logRow, 3) = "Column Error"
            .Cells(logRow, 4) = "ERROR"
            .Cells(logRow, 5) = "SmartViewData is missing required columns"
        End With
        logRow = logRow + 1
        MsgBox "SmartViewData is missing required columns. Please check your Power Query output.", vbExclamation
        Exit Sub
    End If
    
    ' Get column indexes for Tree array
    ' IMPORTANT: This now looks for headers in row 1 of the array (as created by ImportXRPDataAsArrays)
    Dim treeNameCol As Long, treeValueCol As Long, treeParentCol As Long, treeVSCCol As Long
    Dim treeDim1 As Long, treeDim2 As Long
    
    ' Log the tree array dimensions to help with debugging
    With wsProcessLog
        .Cells(logRow, 1) = Now
        .Cells(logRow, 2) = "System"
        .Cells(logRow, 3) = "Array Info"
        .Cells(logRow, 4) = "INFO"
        If IsArray(treeArray) Then
            If IsArray(treeArray(1, 1)) Then
                treeDim1 = UBound(treeArray, 1)
                treeDim2 = UBound(treeArray, 2)
                .Cells(logRow, 5) = "Tree array dimensions: " & treeDim1 & " x " & treeDim2
            ElseIf IsArray(treeArray) Then
                .Cells(logRow, 5) = "Tree array is 1-dimensional or incorrectly formatted"
            End If
        Else
            .Cells(logRow, 5) = "Tree array is not an array type"
        End If
    End With
    logRow = logRow + 1
    
    ' Search for column indexes in tree array headers (row 1)
    For j = 1 To UBound(treeArray, 2)
        If Not IsError(treeArray(1, j)) Then
            Select Case treeArray(1, j)
                Case "Tree_Name"
                    treeNameCol = j
                Case "Value"
                    treeValueCol = j
                Case "Parent"
                    treeParentCol = j
                Case "V_S_C"
                    treeVSCCol = j
            End Select
        End If
    Next j
    
    ' Check if we found all required tree columns
    If treeNameCol = 0 Or treeValueCol = 0 Or treeParentCol = 0 Or treeVSCCol = 0 Then
        With wsProcessLog
            .Cells(logRow, 1) = Now
            .Cells(logRow, 2) = "System"
            .Cells(logRow, 3) = "Column Error"
            .Cells(logRow, 4) = "ERROR"
            .Cells(logRow, 5) = "XRP Tree array is missing required columns"
        End With
        logRow = logRow + 1
        MsgBox "XRP Tree array is missing required columns. Please check the imported data.", vbExclamation
        Exit Sub
    End If
    
    ' Get column indexes for List array
    ' IMPORTANT: This now looks for headers in row 1 of the array (as created by ImportXRPDataAsArrays)
    Dim listValueCol As Long, listVSCCol As Long
    
    ' Search for column indexes in list array headers (row 1)
    For j = 1 To UBound(listArray, 2)
        If Not IsError(listArray(1, j)) Then
            Select Case listArray(1, j)
                Case "Value"
                    listValueCol = j
                Case "V_S_C"
                    listVSCCol = j
            End Select
        End If
    Next j
    
    ' Check if we found all required list columns
    If listValueCol = 0 Or listVSCCol = 0 Then
        With wsProcessLog
            .Cells(logRow, 1) = Now
            .Cells(logRow, 2) = "System"
            .Cells(logRow, 3) = "Column Error"
            .Cells(logRow, 4) = "ERROR"
            .Cells(logRow, 5) = "XRP List array is missing required columns"
        End With
        logRow = logRow + 1
        MsgBox "XRP List array is missing required columns. Please check the imported data.", vbExclamation
        Exit Sub
    End If
    
    ' Process SmartViewData table and compare with XRP arrays
    For i = 1 To svDataLO.DataBodyRange.Rows.Count
        svType = svDataLO.DataBodyRange.Cells(i, svTypeCol).Value
        svVSC = svDataLO.DataBodyRange.Cells(i, svVSCCol).Value
        svHierarchy = svDataLO.DataBodyRange.Cells(i, svHierarchyCol).Value
        svValue = svDataLO.DataBodyRange.Cells(i, svValueCol).Value
        svParent = svDataLO.DataBodyRange.Cells(i, svParentCol).Value
        
        ' Make sure we have a KEY column, if not, create one
        If svKeyCol = 0 Then
            svKey = svHierarchy & " | " & svValue
        Else
            svKey = svDataLO.DataBodyRange.Cells(i, svKeyCol).Value
        End If
        
        matchFound = False
        xrpParent = ""
        
        ' Compare with appropriate XRP array based on type
        If svType = "Tree" Then
            ' Look for match in Tree array
            For j = 2 To UBound(treeArray, 1) ' Start at 2 to skip header row
                If Not IsError(treeArray(j, treeVSCCol)) And Not IsError(treeArray(j, treeNameCol)) And Not IsError(treeArray(j, treeValueCol)) Then
                    If CStr(treeArray(j, treeVSCCol)) = svVSC And _
                       CStr(treeArray(j, treeNameCol)) = svHierarchy And _
                       CStr(treeArray(j, treeValueCol)) = svValue Then
                        matchFound = True
                        If Not IsError(treeArray(j, treeParentCol)) Then
                            xrpParent = CStr(treeArray(j, treeParentCol))
                        Else
                            xrpParent = ""
                        End If
                        Exit For
                    End If
                End If
            Next j
        ElseIf svType = "List" Then
            ' Look for match in List array
            For j = 2 To UBound(listArray, 1) ' Start at 2 to skip header row
                If Not IsError(listArray(j, listVSCCol)) And Not IsError(listArray(j, listValueCol)) Then
                    If CStr(listArray(j, listVSCCol)) = svVSC And _
                       CStr(listArray(j, listValueCol)) = svValue Then
                        matchFound = True
                        xrpParent = "" ' List has no parent
                        Exit For
                    End If
                End If
            Next j
        End If
        
        ' Determine status
        If Not matchFound Then
            status = "Missing in XRP"
        ElseIf svType = "Tree" And svParent <> xrpParent Then
            status = "Different Parent"
        Else
            status = "Match"
        End If
        
        ' Write to output sheet
        With wsOutput
            .Cells(outputRow, 1).Value = svType
            .Cells(outputRow, 2).Value = svVSC
            .Cells(outputRow, 3).Value = svHierarchy
            .Cells(outputRow, 4).Value = svValue
            .Cells(outputRow, 5).Value = svParent
            .Cells(outputRow, 6).Value = xrpParent
            .Cells(outputRow, 7).Value = status
        End With
        outputRow = outputRow + 1
    Next i
    
    ' Find items in XRP Tree array not in SmartViewData
    For j = 2 To UBound(treeArray, 1) ' Start at 2 to skip header row
        If Not IsError(treeArray(j, treeVSCCol)) And Not IsError(treeArray(j, treeNameCol)) And Not IsError(treeArray(j, treeValueCol)) Then
            matchFound = False
            
            ' Create key for comparison
            treeKey = CStr(treeArray(j, treeNameCol)) & " | " & CStr(treeArray(j, treeValueCol))
            
            ' Look for this key in SmartViewData
            For i = 1 To svDataLO.DataBodyRange.Rows.Count
                If svKeyCol > 0 Then
                    compareKey = svDataLO.DataBodyRange.Cells(i, svKeyCol).Value
                Else
                    compareKey = svDataLO.DataBodyRange.Cells(i, svHierarchyCol).Value & " | " & svDataLO.DataBodyRange.Cells(i, svValueCol).Value
                End If
                
                If compareKey = treeKey And _
                   svDataLO.DataBodyRange.Cells(i, svTypeCol).Value = "Tree" And _
                   svDataLO.DataBodyRange.Cells(i, svVSCCol).Value = CStr(treeArray(j, treeVSCCol)) Then
                    matchFound = True
                    Exit For
                End If
            Next i
            
            ' If not found, add to output
            If Not matchFound Then
                With wsOutput
                    .Cells(outputRow, 1).Value = "Tree"
                    .Cells(outputRow, 2).Value = treeArray(j, treeVSCCol)
                    .Cells(outputRow, 3).Value = treeArray(j, treeNameCol)
                    .Cells(outputRow, 4).Value = treeArray(j, treeValueCol)
                    .Cells(outputRow, 5).Value = "" ' No SmartView parent
                    If Not IsError(treeArray(j, treeParentCol)) Then
                        .Cells(outputRow, 6).Value = treeArray(j, treeParentCol)
                    Else
                        .Cells(outputRow, 6).Value = ""
                    End If
                    .Cells(outputRow, 7).Value = "Missing in SmartView"
                End With
                outputRow = outputRow + 1
            End If
        End If
    Next j
    
    ' Find items in XRP List array not in SmartViewData
    For j = 2 To UBound(listArray, 1) ' Start at 2 to skip header row
        If Not IsError(listArray(j, listVSCCol)) And Not IsError(listArray(j, listValueCol)) Then
            matchFound = False
            
            ' Create key for comparison
            listKey = CStr(listArray(j, listVSCCol)) & " | " & CStr(listArray(j, listValueCol))
            
            ' Look for this key in SmartViewData
            For i = 1 To svDataLO.DataBodyRange.Rows.Count
                If svKeyCol > 0 Then
                    compareKey = svDataLO.DataBodyRange.Cells(i, svKeyCol).Value
                Else
                    compareKey = svDataLO.DataBodyRange.Cells(i, svVSCCol).Value & " | " & svDataLO.DataBodyRange.Cells(i, svValueCol).Value
                End If
                
                If compareKey = listKey And _
                   svDataLO.DataBodyRange.Cells(i, svTypeCol).Value = "List" Then
                    matchFound = True
                    Exit For
                End If
            Next i
            
            ' If not found, add to output
            If Not matchFound Then
                With wsOutput
                    .Cells(outputRow, 1).Value = "List"
                    .Cells(outputRow, 2).Value = listArray(j, listVSCCol)
                    .Cells(outputRow, 3).Value = listArray(j, listVSCCol) ' Use V_S_C as hierarchy name for List
                    .Cells(outputRow, 4).Value = listArray(j, listValueCol)
                    .Cells(outputRow, 5).Value = "" ' No SmartView parent
                    .Cells(outputRow, 6).Value = "" ' No XRP parent for List
                    .Cells(outputRow, 7).Value = "Missing in SmartView"
                End With
                outputRow = outputRow + 1
            End If
        End If
    Next j
    
    ' Format conditional formatting for the Status column
    If outputRow > 5 Then  ' If there is data
        With wsOutput.Range("G5:G" & (outputRow - 1))
            .FormatConditions.Delete
            ' Match status - Green
            .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""Match"""
            .FormatConditions(1).Interior.Color = RGB(198, 239, 206)
            
            ' Missing in XRP - Red
            .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""Missing in XRP"""
            .FormatConditions(2).Interior.Color = RGB(255, 199, 206)
            
            ' Missing in SmartView - Yellow
            .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""Missing in SmartView"""
            .FormatConditions(3).Interior.Color = RGB(255, 235, 156)
            
            ' Different Parent - Blue
            .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""Different Parent"""
            .FormatConditions(4).Interior.Color = RGB(197, 217, 241)
        End With
    End If
    
    ' Create table from the data - Skip if number of rows exceeds Excel's formula limit
    If (outputRow - 4) > 8000 Then
        ' Just format as a regular range without creating a table object to avoid formula length limitations
        With wsOutput.Range("A4:G" & (outputRow - 1))
            .Borders.LineStyle = xlContinuous
            .Borders.Weight = xlThin
            .Borders.Color = RGB(180, 180, 180)
            wsOutput.Range("A4:G4").Interior.Color = RGB(200, 200, 200)
        End With
        ' Add filters
        wsOutput.Range("A4:G4").AutoFilter
    Else
        Dim comparisonTable As ListObject
        Set comparisonTable = wsOutput.ListObjects.Add(xlSrcRange, wsOutput.Range("A4:G" & (outputRow - 1)), , xlYes)
        comparisonTable.Name = "DirectComparisonTable"
        comparisonTable.TableStyle = "TableStyleMedium2"
        comparisonTable.ShowAutoFilterDropDown = True
    End If
    
    ' Add a status summary table below the main data
    Dim summaryStartRow As Long
    summaryStartRow = outputRow + 2
    
    ' Variables to store counts instead of using large formulas
    Dim matchCount As Long, missingXRPCount As Long, missingSVCount As Long, diffParentCount As Long
    Dim totalCount As Long
    
    ' Calculate counts manually
    matchCount = 0
    missingXRPCount = 0
    missingSVCount = 0
    diffParentCount = 0
    
    For i = 5 To outputRow - 1
        Select Case wsOutput.Cells(i, 7).Value
            Case "Match"
                matchCount = matchCount + 1
            Case "Missing in XRP"
                missingXRPCount = missingXRPCount + 1
            Case "Missing in SmartView"
                missingSVCount = missingSVCount + 1
            Case "Different Parent"
                diffParentCount = diffParentCount + 1
        End Select
    Next i
    
    totalCount = matchCount + missingXRPCount + missingSVCount + diffParentCount
    
    With wsOutput
        .Range("A" & summaryStartRow).Value = "Summary"
        .Range("A" & summaryStartRow).Font.Bold = True
        .Range("A" & summaryStartRow).Font.Size = 14
        
        .Range("A" & (summaryStartRow + 2)).Value = "Status"
        .Range("B" & (summaryStartRow + 2)).Value = "Count"
        .Range("C" & (summaryStartRow + 2)).Value = "Percentage"
        .Range("A" & (summaryStartRow + 2) & ":C" & (summaryStartRow + 2)).Font.Bold = True
        .Range("A" & (summaryStartRow + 2) & ":C" & (summaryStartRow + 2)).Interior.Color = RGB(200, 200, 200)
        
        ' Add status rows with direct values instead of formulas
        .Range("A" & (summaryStartRow + 3)).Value = "Match"
        .Range("B" & (summaryStartRow + 3)).Value = matchCount
        If totalCount > 0 Then
            .Range("C" & (summaryStartRow + 3)).Value = matchCount / totalCount
        Else
            .Range("C" & (summaryStartRow + 3)).Value = 0
        End If
        .Range("C" & (summaryStartRow + 3)).NumberFormat = "0.0%"
        .Range("A" & (summaryStartRow + 3) & ":C" & (summaryStartRow + 3)).Interior.Color = RGB(198, 239, 206)
        
        .Range("A" & (summaryStartRow + 4)).Value = "Missing in XRP"
        .Range("B" & (summaryStartRow + 4)).Value = missingXRPCount
        If totalCount > 0 Then
            .Range("C" & (summaryStartRow + 4)).Value = missingXRPCount / totalCount
        Else
            .Range("C" & (summaryStartRow + 4)).Value = 0
        End If
        .Range("C" & (summaryStartRow + 4)).NumberFormat = "0.0%"
        .Range("A" & (summaryStartRow + 4) & ":C" & (summaryStartRow + 4)).Interior.Color = RGB(255, 199, 206)
        
        .Range("A" & (summaryStartRow + 5)).Value = "Missing in SmartView"
        .Range("B" & (summaryStartRow + 5)).Value = missingSVCount
        If totalCount > 0 Then
            .Range("C" & (summaryStartRow + 5)).Value = missingSVCount / totalCount
        Else
            .Range("C" & (summaryStartRow + 5)).Value = 0
        End If
        .Range("C" & (summaryStartRow + 5)).NumberFormat = "0.0%"
        .Range("A" & (summaryStartRow + 5) & ":C" & (summaryStartRow + 5)).Interior.Color = RGB(255, 235, 156)
        
        .Range("A" & (summaryStartRow + 6)).Value = "Different Parent"
        .Range("B" & (summaryStartRow + 6)).Value = diffParentCount
        If totalCount > 0 Then
            .Range("C" & (summaryStartRow + 6)).Value = diffParentCount / totalCount
        Else
            .Range("C" & (summaryStartRow + 6)).Value = 0
        End If
        .Range("C" & (summaryStartRow + 6)).NumberFormat = "0.0%"
        .Range("A" & (summaryStartRow + 6) & ":C" & (summaryStartRow + 6)).Interior.Color = RGB(197, 217, 241)
        
        .Range("A" & (summaryStartRow + 7)).Value = "Total"
        .Range("B" & (summaryStartRow + 7)).Value = totalCount
        .Range("C" & (summaryStartRow + 7)).Value = 1
        .Range("C" & (summaryStartRow + 7)).NumberFormat = "0.0%"
        .Range("A" & (summaryStartRow + 7) & ":C" & (summaryStartRow + 7)).Font.Bold = True
        .Range("A" & (summaryStartRow + 7) & ":C" & (summaryStartRow + 7)).Borders(xlEdgeTop).LineStyle = xlContinuous
    End With
    
    ' Add a legend
    Dim legendStartRow As Long
    legendStartRow = summaryStartRow + 10
    
With wsOutput
        .Range("A" & legendStartRow).Value = "Legend"
        .Range("A" & legendStartRow).Font.Bold = True
        
        .Range("A" & (legendStartRow + 2)).Value = "Match"
        .Range("B" & (legendStartRow + 2)).Value = "Identical item with same parent in both systems"
        .Range("A" & (legendStartRow + 2)).Interior.Color = RGB(198, 239, 206)
        
        .Range("A" & (legendStartRow + 3)).Value = "Missing in XRP"
        .Range("B" & (legendStartRow + 3)).Value = "Item exists in SmartView but not in XRP file"
        .Range("A" & (legendStartRow + 3)).Interior.Color = RGB(255, 199, 206)
        
        .Range("A" & (legendStartRow + 4)).Value = "Missing in SmartView"
        .Range("B" & (legendStartRow + 4)).Value = "Item exists in XRP file but not in SmartView"
        .Range("A" & (legendStartRow + 4)).Interior.Color = RGB(255, 235, 156)
        
        .Range("A" & (legendStartRow + 5)).Value = "Different Parent"
        .Range("B" & (legendStartRow + 5)).Value = "Item exists in both systems but has different Parent (Tree type only)"
        .Range("A" & (legendStartRow + 5)).Interior.Color = RGB(197, 217, 241)
        
        .Range("B" & (legendStartRow + 2) & ":B" & (legendStartRow + 5)).WrapText = True
        .Columns("B:B").ColumnWidth = 50
    End With
    
    ' Autofit columns
    wsOutput.Columns("A:G").AutoFit
    
    ' Final log entry
    With wsProcessLog
        .Cells(logRow, 1) = Now
        .Cells(logRow, 2) = "System"
        .Cells(logRow, 3) = "Process Completed"
        .Cells(logRow, 4) = "SUCCESS"
        .Cells(logRow, 5) = "Comparison completed with " & (outputRow - 5) & " total records using arrays: " & TREE_ARRAY_NAME & " and " & LIST_ARRAY_NAME
    End With
    
    ' Format log
    FormatProcessLog wsProcessLog
    
    ' Activate the output sheet
    wsOutput.Activate
    wsOutput.Range("A1").Select
    
    MsgBox "Direct parent comparison completed! Results are in the ParentComparison sheet.", vbInformation
End Sub

'==========================================================
' FORMAT PROCESS LOG
'==========================================================
Private Sub FormatProcessLog(wsLog As Worksheet)
    ' Format the process log with conditional formatting
    
    ' Get last row
    Dim lastRow As Long
    lastRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row
    
    ' Format columns
    wsLog.Columns("A:E").AutoFit
    
    ' Conditional formatting for status column
    Dim statusRange As Range
    Set statusRange = wsLog.Range("D2:D" & lastRow)
    
    statusRange.FormatConditions.Delete
    
    ' Green for SUCCESS
    statusRange.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""SUCCESS"""
    statusRange.FormatConditions(1).Interior.Color = RGB(198, 239, 206)
    
    ' Yellow for WARNING
    statusRange.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""WARNING"""
    statusRange.FormatConditions(2).Interior.Color = RGB(255, 235, 156)
    
    ' Blue for INFO
    statusRange.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""INFO"""
    statusRange.FormatConditions(3).Interior.Color = RGB(197, 217, 241)
    
    ' Red for ERROR
    statusRange.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""ERROR"""
    statusRange.FormatConditions(4).Interior.Color = RGB(255, 199, 206)
    
    ' Sort by timestamp descending
    wsLog.Range("A1:E" & lastRow).Sort Key1:=wsLog.Range("A1"), Order1:=xlDescending, Header:=xlYes
End Sub
