let
    // Step 1: Reference the existing SmartViewData query
    SmartViewData = SmartViewData,
    
    // Step 2: Reference the XRP Tree and List arrays
    XRPTreeArrayRaw = Excel.CurrentWorkbook(){[Name="XRP_Tree_Array"]}[Content],
    XRPListArrayRaw = Excel.CurrentWorkbook(){[Name="XRP_List_Array"]}[Content],
    
    // Step 3: Convert Tree array to a table
    // First, extract the first row as headers
    XRPTreeFirstRow = List.First(XRPTreeArrayRaw),
    XRPTreeDataRows = List.Skip(XRPTreeArrayRaw, 1),
    
    // Create proper column names from the first row
    XRPTreeHeaders = if XRPTreeFirstRow is list then 
                        XRPTreeFirstRow 
                     else 
                        Table.ColumnNames(Table.FromRecords({XRPTreeFirstRow})),
    
    // Convert rows to a proper table with column names
    XRPTreeTable = Table.FromRows(XRPTreeDataRows, XRPTreeHeaders),
    
    // Step 4: Convert List array to a table
    // First, extract the first row as headers
    XRPListFirstRow = List.First(XRPListArrayRaw),
    XRPListDataRows = List.Skip(XRPListArrayRaw, 1),
    
    // Create proper column names from the first row
    XRPListHeaders = if XRPListFirstRow is list then 
                        XRPListFirstRow 
                     else 
                        Table.ColumnNames(Table.FromRecords({XRPListFirstRow})),
    
    // Convert rows to a proper table with column names
    XRPListTable = Table.FromRows(XRPListDataRows, XRPListHeaders),
    
    // Step 5: Clean and rename key columns for Tree data
    XRPTreeCleaned = Table.SelectColumns(XRPTreeTable, {"Tree_Name", "Value", "Parent", "V_S_C"}),
    XRPTreeRenamed = Table.RenameColumns(XRPTreeCleaned, {
        {"Tree_Name", "Hierarchy Name"},
        {"Value", "XRP_Value"},
        {"Parent", "XRP_Parent"}
    }),
    
    // Step 6: Clean and rename key columns for List data
    XRPListCleaned = Table.SelectColumns(XRPListTable, {"Value", "V_S_C"}),
    XRPListRenamed = Table.RenameColumns(XRPListCleaned, {
        {"Value", "XRP_Value"}
    }),
    
    // Step 7: For List data, use V_S_C as the Hierarchy Name
    XRPListWithHierarchy = Table.AddColumn(XRPListRenamed, "Hierarchy Name", each [V_S_C], type text),
    
    // Add empty Parent column to List data
    XRPListWithParent = Table.AddColumn(XRPListWithHierarchy, "XRP_Parent", each "", type text),
    
    // Step 8: Add Type column to both datasets
    XRPTreeWithType = Table.AddColumn(XRPTreeRenamed, "Type", each "Tree", type text),
    XRPListWithType = Table.AddColumn(XRPListWithParent, "Type", each "List", type text),
    
    // Step 9: Create KEY column matching SmartViewData format
    // For Tree: "Tree_Name | Value"
    // For List: "V_S_C | Value"
    XRPTreeWithKey = Table.AddColumn(XRPTreeWithType, "KEY", each [Hierarchy Name] & " | " & [XRP_Value], type text),
    XRPListWithKey = Table.AddColumn(XRPListWithType, "KEY", each [Hierarchy Name] & " | " & [XRP_Value], type text),
    
    // Step 10: Combine both XRP data sources
    CombinedXRP = Table.Combine({XRPTreeWithKey, XRPListWithKey}),
    
    // Step 11: Split SmartViewData and XRP data by Type
    SVTree = Table.SelectRows(SmartViewData, each [Type] = "Tree"),
    SVList = Table.SelectRows(SmartViewData, each [Type] = "List"),
    XRPTree = Table.SelectRows(CombinedXRP, each [Type] = "Tree"),
    XRPList = Table.SelectRows(CombinedXRP, each [Type] = "List"),
    
    // Step 12: Join Tree data using V_S_C filter and KEY matching
    SVTreeJoin = Table.NestedJoin(
        SVTree,
        {"V_S_C", "KEY"},
        XRPTree,
        {"V_S_C", "KEY"},
        "XRPMatches",
        JoinKind.LeftOuter
    ),
    SVTreeWithXRP = Table.ExpandTableColumn(
        SVTreeJoin,
        "XRPMatches",
        {"XRP_Parent"},
        {"XRP_Parent"}
    ),
    
    // Step 13: Join List data using V_S_C filter and KEY matching
    SVListJoin = Table.NestedJoin(
        SVList,
        {"V_S_C", "KEY"},
        XRPList,
        {"V_S_C", "KEY"},
        "XRPMatches",
        JoinKind.LeftOuter
    ),
    SVListWithXRP = Table.ExpandTableColumn(
        SVListJoin,
        "XRPMatches",
        {"XRP_Parent"},
        {"XRP_Parent"}
    ),
    
    // Step 14: Combine joined SmartView results
    CombinedSVWithXRP = Table.Combine({SVTreeWithXRP, SVListWithXRP}),
    
    // Step 15: Find items in XRP not in SmartView
    XRPTreeAnti = Table.NestedJoin(
        XRPTree,
        {"V_S_C", "KEY"},
        SVTree,
        {"V_S_C", "KEY"},
        "SVMatches",
        JoinKind.LeftAnti
    ),
    XRPTreeAntiCleaned = Table.RemoveColumns(XRPTreeAnti, {"SVMatches"}),
    
    XRPListAnti = Table.NestedJoin(
        XRPList,
        {"V_S_C", "KEY"},
        SVList,
        {"V_S_C", "KEY"},
        "SVMatches",
        JoinKind.LeftAnti
    ),
    XRPListAntiCleaned = Table.RemoveColumns(XRPListAnti, {"SVMatches"}),
    
    // Step 16: Combine XRP-only items
    CombinedXRPOnly = Table.Combine({XRPTreeAntiCleaned, XRPListAntiCleaned}),
    
    // Step 17: Add empty SmartView columns to XRP-only data
    XRPOnlyWithSV = Table.AddColumn(CombinedXRPOnly, "Value", each null),
    XRPOnlyWithSVMore = Table.AddColumn(XRPOnlyWithSV, "Parent", each null),
    
    // Step 18: Prepare columns for final output
    XRPOnlyRenamed = Table.RenameColumns(XRPOnlyWithSVMore, {{"XRP_Value", "Value"}}),
    SVWithXRPRenamed = Table.RenameColumns(CombinedSVWithXRP, {
        {"Value", "SV_Value"},
        {"Parent", "SV_Parent"}
    }),
    
    // Step 19: Combine all results
    AllResults = Table.Combine({SVWithXRPRenamed, XRPOnlyRenamed}),
    
    // Step 20: Add Status column based on comparison
    WithStatus = Table.AddColumn(AllResults, "Status", each
        if [SV_Value] = null then "Missing in SmartView"
        else if [XRP_Parent] = null and [Type] = "Tree" then "Missing in XRP"
        else if [Type] = "Tree" and [SV_Parent] <> [XRP_Parent] then "Different Parent"
        else if [Type] = "List" and [XRP_Parent] = null then "Missing in XRP"
        else "Match",
        type text
    ),
    
    // Step 21: Final column cleanup and selection
    FinalColumns = Table.SelectColumns(WithStatus, {
        "Hierarchy Name", "Type", "V_S_C", "SV_Value", "SV_Parent", "XRP_Parent", "Status"
    }),
    
    // Step 22: Rename columns for clarity
    RenamedColumns = Table.RenameColumns(FinalColumns, {
        {"SV_Value", "Value"},
        {"SV_Parent", "SmartView Parent"},
        {"XRP_Parent", "XRP Parent"}
    }),
    
    // Step 23: Sort results
    SortedResults = Table.Sort(RenamedColumns, {
        {"Type", Order.Ascending},
        {"V_S_C", Order.Ascending},
        {"Hierarchy Name", Order.Ascending},
        {"Status", Order.Ascending}
    })
in
    SortedResults
