let
    // Step 1: Reference the existing SmartViewData query
    SmartViewData = SmartViewData,
    
    // Step 2: Extract necessary columns from SmartViewData
    SVCleaned = Table.SelectColumns(SmartViewData, {"Hierarchy Name", "Type", "V_S_C", "Value", "Parent", "KEY"}),
    
    // Step 3: Reference the XRP Tree array
    // Get array name from Lists sheet cell E3
    TreeArrayName = Excel.CurrentWorkbook(){[Name="Lists"]}[Content]{0}[E3],
    
    // Use the array name or default to "XRP_Tree_Array"
    FinalTreeArrayName = if TreeArrayName = null then "XRP_Tree_Array" else TreeArrayName,
    XRPTreeArray = Excel.CurrentWorkbook(){[Name=FinalTreeArrayName]}[Content],
    
    // Step 4: Reference the XRP List array
    // Get array name from Lists sheet cell E5
    ListArrayName = Excel.CurrentWorkbook(){[Name="Lists"]}[Content]{0}[E5],
    
    // Use the array name or default to "XRP_List_Array"
    FinalListArrayName = if ListArrayName = null then "XRP_List_Array" else ListArrayName,
    XRPListArray = Excel.CurrentWorkbook(){[Name=FinalListArrayName]}[Content],
    
    // Step 5: Get headers from XRP Tree and transform data
    XRPTreeHeaders = Table.FirstN(XRPTreeArray, 1),
    XRPTreeHeaderList = Table.ToColumns(XRPTreeHeaders),
    
    // Convert header row to a proper header
    XRPTreeData = Table.Skip(XRPTreeArray, 1),
    XRPTreeDataWithHeaders = Table.RenameColumns(XRPTreeData, List.Transform(
        {0..List.Count(XRPTreeHeaderList)-1}, 
        each {Text.From(_), if XRPTreeHeaderList{_} = null then Text.From(_) else Text.From(XRPTreeHeaderList{_})}
    )),
    
    // Find and extract Tree_Name, Value, Parent, and V_S_C columns
    TreeNameCol = List.PositionOf(XRPTreeHeaderList, "Tree_Name"),
    TreeValueCol = List.PositionOf(XRPTreeHeaderList, "Value"),
    TreeParentCol = List.PositionOf(XRPTreeHeaderList, "Parent"),
    TreeVSCCol = List.PositionOf(XRPTreeHeaderList, "V_S_C"),
    
    // Extract and rename key columns
    XRPTreeCleaned = Table.SelectColumns(
        XRPTreeDataWithHeaders, 
        {
            Text.From(TreeNameCol), 
            Text.From(TreeValueCol), 
            Text.From(TreeParentCol), 
            Text.From(TreeVSCCol)
        }
    ),
    XRPTreeRenamed = Table.RenameColumns(
        XRPTreeCleaned, 
        {
            {Text.From(TreeNameCol), "Hierarchy Name"},
            {Text.From(TreeValueCol), "XRP_Value"},
            {Text.From(TreeParentCol), "XRP_Parent"},
            {Text.From(TreeVSCCol), "V_S_C"}
        }
    ),
    
    // Step 6: Get headers from XRP List and transform data
    XRPListHeaders = Table.FirstN(XRPListArray, 1),
    XRPListHeaderList = Table.ToColumns(XRPListHeaders),
    
    // Convert header row to a proper header
    XRPListData = Table.Skip(XRPListArray, 1),
    XRPListDataWithHeaders = Table.RenameColumns(XRPListData, List.Transform(
        {0..List.Count(XRPListHeaderList)-1}, 
        each {Text.From(_), if XRPListHeaderList{_} = null then Text.From(_) else Text.From(XRPListHeaderList{_})}
    )),
    
    // Find and extract Value and V_S_C columns
    ListValueCol = List.PositionOf(XRPListHeaderList, "Value"),
    ListVSCCol = List.PositionOf(XRPListHeaderList, "V_S_C"),
    
    // Extract and rename key columns
    XRPListCleaned = Table.SelectColumns(
        XRPListDataWithHeaders, 
        {
            Text.From(ListValueCol), 
            Text.From(ListVSCCol)
        }
    ),
    XRPListRenamed = Table.RenameColumns(
        XRPListCleaned, 
        {
            {Text.From(ListValueCol), "XRP_Value"},
            {Text.From(ListVSCCol), "V_S_C"}
        }
    ),
    
    // Step 7: Add Hierarchy Name and empty Parent column to List data
    XRPListWithHierarchy = Table.AddColumn(XRPListRenamed, "Hierarchy Name", each [V_S_C], type text),
    XRPListWithParent = Table.AddColumn(XRPListWithHierarchy, "XRP_Parent", each "", type text),
    
    // Step 8: Add Type column to both datasets
    XRPTreeWithType = Table.AddColumn(XRPTreeRenamed, "Type", each "Tree", type text),
    XRPListWithType = Table.AddColumn(XRPListWithParent, "Type", each "List", type text),
    
    // Step 9: Create KEY column for both XRP datasets
    // KEY is combination of Hierarchy Name and Value
    XRPTreeWithKey = Table.AddColumn(XRPTreeWithType, "KEY", each [Hierarchy Name] & " | " & [XRP_Value], type text),
    XRPListWithKey = Table.AddColumn(XRPListWithType, "KEY", each [Hierarchy Name] & " | " & [XRP_Value], type text),
    
    // Step 10: Combine both XRP data sources
    CombinedXRP = Table.Combine({XRPTreeWithKey, XRPListWithKey}),
    
    // Step 11: Filter and split SmartViewData by Type
    SVTree = Table.SelectRows(SVCleaned, each [Type] = "Tree"),
    SVList = Table.SelectRows(SVCleaned, each [Type] = "List"),
    
    // Step 12: Filter XRP data by Type
    XRPTree = Table.SelectRows(CombinedXRP, each [Type] = "Tree"),
    XRPList = Table.SelectRows(CombinedXRP, each [Type] = "List"),
    
    // Step 13: Join SmartView Tree data with XRP Tree data using KEY, V_S_C and Hierarchy Name
    SVTreeJoin = Table.NestedJoin(
        SVTree,
        {"V_S_C", "Hierarchy Name", "KEY"},  // Filter by V_S_C and Hierarchy Name, match by KEY
        XRPTree,
        {"V_S_C", "Hierarchy Name", "KEY"},  // Filter by V_S_C and Hierarchy Name, match by KEY
        "XRPMatches",
        JoinKind.LeftOuter
    ),
    SVTreeWithXRP = Table.ExpandTableColumn(
        SVTreeJoin,
        "XRPMatches",
        {"XRP_Parent"},
        {"XRP_Parent"}
    ),
    
    // Step 14: Join SmartView List data with XRP List data using KEY and V_S_C
    SVListJoin = Table.NestedJoin(
        SVList,
        {"V_S_C", "KEY"},  // Filter by V_S_C, match by KEY
        XRPList,
        {"V_S_C", "KEY"},  // Filter by V_S_C, match by KEY
        "XRPMatches",
        JoinKind.LeftOuter
    ),
    SVListWithXRP = Table.ExpandTableColumn(
        SVListJoin,
        "XRPMatches",
        {"XRP_Parent"},
        {"XRP_Parent"}
    ),
    
    // Step 15: Combine joined SmartView results
    CombinedSVWithXRP = Table.Combine({SVTreeWithXRP, SVListWithXRP}),
    
    // Step 16: Find items in XRP Tree not in SmartView Tree (filtering by V_S_C and Hierarchy Name)
    XRPTreeAnti = Table.NestedJoin(
        XRPTree,
        {"V_S_C", "Hierarchy Name", "KEY"},  // Filter by V_S_C and Hierarchy Name, match by KEY
        SVTree,
        {"V_S_C", "Hierarchy Name", "KEY"},  // Filter by V_S_C and Hierarchy Name, match by KEY
        "SVMatches",
        JoinKind.LeftAnti
    ),
    XRPTreeAntiCleaned = Table.RemoveColumns(XRPTreeAnti, {"SVMatches"}),
    
    // Step 17: Find items in XRP List not in SmartView List (filtering by V_S_C)
    XRPListAnti = Table.NestedJoin(
        XRPList,
        {"V_S_C", "KEY"},  // Filter by V_S_C, match by KEY
        SVList,
        {"V_S_C", "KEY"},  // Filter by V_S_C, match by KEY
        "SVMatches",
        JoinKind.LeftAnti
    ),
    XRPListAntiCleaned = Table.RemoveColumns(XRPListAnti, {"SVMatches"}),
    
    // Step 18: Combine XRP-only items
    CombinedXRPOnly = Table.Combine({XRPTreeAntiCleaned, XRPListAntiCleaned}),
    
    // Step 19: Add empty SmartView columns to XRP-only data
    XRPOnlyWithSV = Table.AddColumn(CombinedXRPOnly, "Value", each null),
    XRPOnlyWithSVMore = Table.AddColumn(XRPOnlyWithSV, "Parent", each null),
    
    // Step 20: Rename XRP_Value to Value for XRP-only records for consistent display
    XRPOnlyRenamed = Table.RenameColumns(XRPOnlyWithSVMore, {{"XRP_Value", "Value"}}),
    
    // Step 21: Rename Value/Parent to SV_Value/SV_Parent for consistency
    CombinedSVRenamed = Table.RenameColumns(CombinedSVWithXRP, {
        {"Value", "SV_Value"},
        {"Parent", "SV_Parent"}
    }),
    
    // Step 22: Combine all results
    AllResults = Table.Combine({CombinedSVRenamed, XRPOnlyRenamed}),
    
    // Step 23: Add Status column based on comparison
    WithStatus = Table.AddColumn(AllResults, "Status", each
        if [SV_Value] = null then "Missing in SmartView"
        else if [XRP_Parent] = null and [Type] = "Tree" then "Missing in XRP"
        else if [Type] = "Tree" and [SV_Parent] <> [XRP_Parent] then "Different Parent"
        else if [Type] = "List" and [XRP_Parent] = null then "Missing in XRP"
        else "Match",
        type text
    ),
    
    // Step 24: Final column cleanup and selection
    FinalColumns = Table.SelectColumns(WithStatus, {
        "Hierarchy Name", "Type", "V_S_C", "SV_Value", "SV_Parent", "XRP_Parent", "Status"
    }),
    
    // Step 25: Rename columns for clarity
    RenamedColumns = Table.RenameColumns(FinalColumns, {
        {"SV_Value", "Value"},
        {"SV_Parent", "SmartView Parent"},
        {"XRP_Parent", "XRP Parent"}
    }),
    
    // Step 26: Sort results
    SortedResults = Table.Sort(RenamedColumns, {
        {"Type", Order.Ascending},
        {"V_S_C", Order.Ascending},
        {"Hierarchy Name", Order.Ascending},
        {"Status", Order.Ascending}
    })
in
    SortedResults
