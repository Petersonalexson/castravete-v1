Option Explicit

Public Sub CompareSmartViewDataParents()
    ' This procedure compares parents in SmartViewData sheet against two XRP arrays:
    '   1) XRP_Tree_Array (Tree data with columns: Tree_Name, Value, Parent, V_S_C)
    '   2) XRP_List_Array (List data with columns: Value, V_S_C)
    '
    ' Results go to Sheet1 (the first sheet).
    ' Logs and errors go to ProcessLog3.

    Dim wsSmartView As Worksheet
    Dim wsOutput As Worksheet
    Dim wsProcessLog As Worksheet
    Dim lastRowSV As Long
    Dim lastColSV As Long
    Dim svTypeCol As Long, svVSCCol As Long, svHierarchyCol As Long
    Dim svValueCol As Long, svParentCol As Long, svKeyCol As Long
    Dim i As Long, j As Long
    
    Dim svType As String, svVSC As String, svHierarchy As String
    Dim svValue As String, svParent As String, svKey As String
    
    Dim treeArray As Variant, listArray As Variant
    Dim treeNameCol As Long, treeValueCol As Long, treeParentCol As Long, treeVSCCol As Long
    Dim listValueCol As Long, listVSCCol As Long
    Dim matchFound As Boolean
    Dim xrpParent As String
    Dim treeKey As String, listKey As String, compareKey As String
    Dim status As String
    
    Dim outputRow As Long
    Dim matchCount As Long, missingXRPCount As Long, missingSVCount As Long, diffParentCount As Long
    Dim totalCount As Long
    
    '-----------------------------------------------------------------------
    ' 1) CREATE/GET THE PROCESSLOG3 SHEET
    '-----------------------------------------------------------------------
    On Error Resume Next
    Set wsProcessLog = ThisWorkbook.Worksheets("ProcessLog3")
    If wsProcessLog Is Nothing Then
        Set wsProcessLog = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsProcessLog.Name = "ProcessLog3"
        With wsProcessLog
            .Range("A1").Value = "Timestamp"
            .Range("B1").Value = "Source"
            .Range("C1").Value = "Action"
            .Range("D1").Value = "Status"
            .Range("E1").Value = "Details"
            .Range("A1:E1").Font.Bold = True
        End With
    End If
    On Error GoTo 0
    
    Dim logRow As Long
    logRow = wsProcessLog.Cells(wsProcessLog.Rows.Count, "A").End(xlUp).Row + 1
    With wsProcessLog
        .Cells(logRow, 1).Value = Now
        .Cells(logRow, 2).Value = "System"
        .Cells(logRow, 3).Value = "CompareParents"
        .Cells(logRow, 4).Value = "INFO"
        .Cells(logRow, 5).Value = "Process started"
    End With
    logRow = logRow + 1
    
    '-----------------------------------------------------------------------
    ' 2) REFERENCE THE SMARTVIEWDATA SHEET
    '-----------------------------------------------------------------------
    On Error Resume Next
    Set wsSmartView = ThisWorkbook.Worksheets("SmartViewData")
    On Error GoTo 0
    
    If wsSmartView Is Nothing Then
        With wsProcessLog
            .Cells(logRow, 1).Value = Now
            .Cells(logRow, 2).Value = "CompareParents"
            .Cells(logRow, 3).Value = "Check SmartViewData"
            .Cells(logRow, 4).Value = "ERROR"
            .Cells(logRow, 5).Value = "Sheet 'SmartViewData' not found."
        End With
        MsgBox "Sheet 'SmartViewData' not found!", vbExclamation
        Exit Sub
    End If
    
    ' Determine last row/column in SmartViewData
    lastRowSV = wsSmartView.Cells(wsSmartView.Rows.Count, 1).End(xlUp).Row
    lastColSV = wsSmartView.Cells(1, wsSmartView.Columns.Count).End(xlToLeft).Column
    
    If lastRowSV < 2 Then
        With wsProcessLog
            .Cells(logRow, 1).Value = Now
            .Cells(logRow, 2).Value = "CompareParents"
            .Cells(logRow, 3).Value = "Check SmartViewData"
            .Cells(logRow, 4).Value = "ERROR"
            .Cells(logRow, 5).Value = "No data in SmartViewData (only headers?)."
        End With
        MsgBox "No data in SmartViewData. Please ensure at least one row of data under the header.", vbExclamation
        Exit Sub
    End If
    
    '-----------------------------------------------------------------------
    ' 3) IDENTIFY COLUMNS (TYPE, V_S_C, HIERARCHY, VALUE, PARENT, KEY?)
    '    by scanning row 1.
    '-----------------------------------------------------------------------
    Dim headerVal As String
    
    For i = 1 To lastColSV
        headerVal = Trim(wsSmartView.Cells(1, i).Value & "")
        Select Case UCase(headerVal)
            Case "TYPE"
                svTypeCol = i
            Case "V_S_C"
                svVSCCol = i
            Case "HIERARCHY NAME"
                svHierarchyCol = i
            Case "VALUE"
                svValueCol = i
            Case "PARENT"
                svParentCol = i
            Case "KEY"
                svKeyCol = i
        End Select
    Next i
    
    ' Basic validation
    If svTypeCol = 0 Or svVSCCol = 0 Or svHierarchyCol = 0 Or svValueCol = 0 Or svParentCol = 0 Then
        With wsProcessLog
            .Cells(logRow, 1).Value = Now
            .Cells(logRow, 2).Value = "CompareParents"
            .Cells(logRow, 3).Value = "Validate Columns"
            .Cells(logRow, 4).Value = "ERROR"
            .Cells(logRow, 5).Value = "Missing required columns in SmartViewData."
        End With
        MsgBox "Missing required columns (Type, V_S_C, Hierarchy Name, Value, Parent) in SmartViewData!", vbExclamation
        Exit Sub
    End If
    
    '-----------------------------------------------------------------------
    ' 4) GET THE XRP ARRAYS: "XRP_Tree_Array" and "XRP_List_Array"
    '-----------------------------------------------------------------------
    On Error Resume Next
    If ThisWorkbook.Names("XRP_Tree_Array") Is Nothing Or ThisWorkbook.Names("XRP_List_Array") Is Nothing Then
        With wsProcessLog
            .Cells(logRow, 1).Value = Now
            .Cells(logRow, 2).Value = "CompareParents"
            .Cells(logRow, 3).Value = "Check Arrays"
            .Cells(logRow, 4).Value = "ERROR"
            .Cells(logRow, 5).Value = "XRP_Tree_Array or XRP_List_Array not found."
        End With
        MsgBox "Could not find 'XRP_Tree_Array' or 'XRP_List_Array'. Make sure you imported them first!", vbExclamation
        Exit Sub
    End If
    On Error GoTo 0
    
    treeArray = ThisWorkbook.Names("XRP_Tree_Array").RefersToRange.Value
    listArray = ThisWorkbook.Names("XRP_List_Array").RefersToRange.Value
    
    '-----------------------------------------------------------------------
    ' 5) FIND COLUMN INDEXES IN THE XRP ARRAYS BY SCANNING THE HEADER ROW
    '    (We assume row 1 in each array is the header)
    '-----------------------------------------------------------------------
    treeNameCol = 0: treeValueCol = 0: treeParentCol = 0: treeVSCCol = 0
    If IsArray(treeArray) Then
        For j = 1 To UBound(treeArray, 2)
            Select Case Trim(UCase(treeArray(1, j) & ""))
                Case "TREE_NAME"
                    treeNameCol = j
                Case "VALUE"
                    treeValueCol = j
                Case "PARENT"
                    treeParentCol = j
                Case "V_S_C"
                    treeVSCCol = j
            End Select
        Next j
    End If
    
    If (treeNameCol = 0 Or treeValueCol = 0 Or treeParentCol = 0 Or treeVSCCol = 0) Then
        With wsProcessLog
            .Cells(logRow, 1).Value = Now
            .Cells(logRow, 2).Value = "CompareParents"
            .Cells(logRow, 3).Value = "Validate Tree Array"
            .Cells(logRow, 4).Value = "ERROR"
            .Cells(logRow, 5).Value = "Could not find required columns in XRP_Tree_Array."
        End With
        MsgBox "XRP_Tree_Array is missing required headers (Tree_Name, Value, Parent, V_S_C) in row 1.", vbExclamation
        Exit Sub
    End If
    
    listValueCol = 0: listVSCCol = 0
    If IsArray(listArray) Then
        For j = 1 To UBound(listArray, 2)
            Select Case Trim(UCase(listArray(1, j) & ""))
                Case "VALUE"
                    listValueCol = j
                Case "V_S_C"
                    listVSCCol = j
            End Select
        Next j
    End If
    
    If (listValueCol = 0 Or listVSCCol = 0) Then
        With wsProcessLog
            .Cells(logRow, 1).Value = Now
            .Cells(logRow, 2).Value = "CompareParents"
            .Cells(logRow, 3).Value = "Validate List Array"
            .Cells(logRow, 4).Value = "ERROR"
            .Cells(logRow, 5).Value = "Could not find required columns in XRP_List_Array."
        End With
        MsgBox "XRP_List_Array is missing required headers (Value, V_S_C) in row 1.", vbExclamation
        Exit Sub
    End If
    
    '-----------------------------------------------------------------------
    ' 6) SET UP OUTPUT IN THE FIRST SHEET (Sheet1)
    '-----------------------------------------------------------------------
    Set wsOutput = ThisWorkbook.Worksheets(1)
    wsOutput.Cells.Clear
    wsOutput.Range("A1").Value = "SmartView vs. XRP Parent Comparison"
    wsOutput.Range("A2").Value = "Generated: " & Format(Now, "yyyy-mm-dd hh:mm:ss")
    
    'Header row
    wsOutput.Range("A4").Value = "Type"
    wsOutput.Range("B4").Value = "V_S_C"
    wsOutput.Range("C4").Value = "Hierarchy Name"
    wsOutput.Range("D4").Value = "Value"
    wsOutput.Range("E4").Value = "SmartView Parent"
    wsOutput.Range("F4").Value = "XRP Parent"
    wsOutput.Range("G4").Value = "Status"
    wsOutput.Range("A4:G4").Font.Bold = True
    
    outputRow = 5
    
    '-----------------------------------------------------------------------
    ' 7) LOOP THROUGH SMARTVIEWDATA & COMPARE
    '-----------------------------------------------------------------------
    Dim rowSV As Long
    For rowSV = 2 To lastRowSV  ' Start from row 2, down to the last row
        svType = Trim(wsSmartView.Cells(rowSV, svTypeCol).Value & "")
        svVSC = Trim(wsSmartView.Cells(rowSV, svVSCCol).Value & "")
        svHierarchy = Trim(wsSmartView.Cells(rowSV, svHierarchyCol).Value & "")
        svValue = Trim(wsSmartView.Cells(rowSV, svValueCol).Value & "")
        svParent = Trim(wsSmartView.Cells(rowSV, svParentCol).Value & "")
        
        ' If KEY col exists, use it, otherwise create
        If svKeyCol > 0 Then
            svKey = Trim(wsSmartView.Cells(rowSV, svKeyCol).Value & "")
            If svKey = "" Then
                svKey = svHierarchy & " | " & svValue
            End If
        Else
            svKey = svHierarchy & " | " & svValue
        End If
        
        matchFound = False
        xrpParent = ""
        
        If UCase(svType) = "TREE" Then
            ' Search treeArray
            Dim rowT As Long
            For rowT = 2 To UBound(treeArray, 1)  ' Skip header row
                If (Trim(UCase(treeArray(rowT, treeNameCol) & "")) = UCase(svHierarchy)) And _
                   (Trim(UCase(treeArray(rowT, treeValueCol) & "")) = UCase(svValue)) And _
                   (Trim(UCase(treeArray(rowT, treeVSCCol) & "")) = UCase(svVSC)) Then
                       
                   matchFound = True
                   xrpParent = Trim(treeArray(rowT, treeParentCol) & "")
                   Exit For
                End If
            Next rowT
            
            If Not matchFound Then
                status = "Missing in XRP"
            ElseIf StrComp(svParent, xrpParent, vbTextCompare) <> 0 Then
                status = "Different Parent"
            Else
                status = "Match"
            End If
            
        ElseIf UCase(svType) = "LIST" Then
            ' Search listArray
            Dim rowL As Long
            For rowL = 2 To UBound(listArray, 1)
                If (Trim(UCase(listArray(rowL, listValueCol) & "")) = UCase(svValue)) And _
                   (Trim(UCase(listArray(rowL, listVSCCol) & "")) = UCase(svVSC)) Then
                    matchFound = True
                    ' There's no parent in a LIST, so blank
                    xrpParent = ""
                    Exit For
                End If
            Next rowL
            
            If Not matchFound Then
                status = "Missing in XRP"
            Else
                status = "Match"
            End If
        
        Else
            ' If Type is neither "Tree" nor "List", skip or mark as unknown
            status = "Unknown Type"
        End If
        
        'Write to output
        wsOutput.Cells(outputRow, 1).Value = svType
        wsOutput.Cells(outputRow, 2).Value = svVSC
        wsOutput.Cells(outputRow, 3).Value = svHierarchy
        wsOutput.Cells(outputRow, 4).Value = svValue
        wsOutput.Cells(outputRow, 5).Value = svParent
        wsOutput.Cells(outputRow, 6).Value = xrpParent
        wsOutput.Cells(outputRow, 7).Value = status
        
        outputRow = outputRow + 1
    Next rowSV
    
    '-----------------------------------------------------------------------
    ' 8) FIND ITEMS IN XRP TREE NOT IN SMARTVIEW (MISSING IN SMARTVIEW)
    '-----------------------------------------------------------------------
    Dim foundInSV As Boolean
    For rowT = 2 To UBound(treeArray, 1)
        foundInSV = False
        
        Dim tName As String, tValue As String, tVSC As String, tParent As String
        tName = Trim(treeArray(rowT, treeNameCol) & "")
        tValue = Trim(treeArray(rowT, treeValueCol) & "")
        tParent = Trim(treeArray(rowT, treeParentCol) & "")
        tVSC = Trim(treeArray(rowT, treeVSCCol) & "")
        
        treeKey = UCase(tName & " | " & tValue)
        
        ' Look in SmartView
        For rowSV = 2 To lastRowSV
            svType = Trim(wsSmartView.Cells(rowSV, svTypeCol).Value & "")
            If UCase(svType) = "TREE" Then
                svVSC = Trim(UCase(wsSmartView.Cells(rowSV, svVSCCol).Value & ""))
                svHierarchy = Trim(UCase(wsSmartView.Cells(rowSV, svHierarchyCol).Value & ""))
                svValue = Trim(UCase(wsSmartView.Cells(rowSV, svValueCol).Value & ""))
                
                If (svVSC = UCase(tVSC)) And (svHierarchy = UCase(tName)) And (svValue = UCase(tValue)) Then
                    foundInSV = True
                    Exit For
                End If
            End If
        Next rowSV
        
        If Not foundInSV Then
            'Add to output
            wsOutput.Cells(outputRow, 1).Value = "Tree"
            wsOutput.Cells(outputRow, 2).Value = tVSC
            wsOutput.Cells(outputRow, 3).Value = tName
            wsOutput.Cells(outputRow, 4).Value = tValue
            wsOutput.Cells(outputRow, 5).Value = "" ' No SV parent
            wsOutput.Cells(outputRow, 6).Value = tParent
            wsOutput.Cells(outputRow, 7).Value = "Missing in SmartView"
            outputRow = outputRow + 1
        End If
    Next rowT
    
    '-----------------------------------------------------------------------
    ' 9) FIND ITEMS IN XRP LIST NOT IN SMARTVIEW
    '-----------------------------------------------------------------------
    For rowL = 2 To UBound(listArray, 1)
        foundInSV = False
        
        Dim lValue As String, lVSC As String
        lValue = Trim(listArray(rowL, listValueCol) & "")
        lVSC = Trim(listArray(rowL, listVSCCol) & "")
        
        listKey = UCase(lVSC & " | " & lValue)
        
        'Look in SmartView
        For rowSV = 2 To lastRowSV
            svType = Trim(UCase(wsSmartView.Cells(rowSV, svTypeCol).Value & ""))
            If svType = "LIST" Then
                svVSC = Trim(UCase(wsSmartView.Cells(rowSV, svVSCCol).Value & ""))
                svValue = Trim(UCase(wsSmartView.Cells(rowSV, svValueCol).Value & ""))
                If (svVSC = UCase(lVSC)) And (svValue = UCase(lValue)) Then
                    foundInSV = True
                    Exit For
                End If
            End If
        Next rowSV
        
        If Not foundInSV Then
            wsOutput.Cells(outputRow, 1).Value = "List"
            wsOutput.Cells(outputRow, 2).Value = lVSC
            wsOutput.Cells(outputRow, 3).Value = lVSC  ' For List, the Hierarchy is V_S_C
            wsOutput.Cells(outputRow, 4).Value = lValue
            wsOutput.Cells(outputRow, 5).Value = "" ' No SV parent
            wsOutput.Cells(outputRow, 6).Value = "" ' No parent in List
            wsOutput.Cells(outputRow, 7).Value = "Missing in SmartView"
            outputRow = outputRow + 1
        End If
    Next rowL
    
    '-----------------------------------------------------------------------
    ' 10) CONDITIONAL FORMATTING & SUMMARY
    '-----------------------------------------------------------------------
    If outputRow > 5 Then
        Dim rngStatus As Range
        Set rngStatus = wsOutput.Range("G5:G" & (outputRow - 1))
        rngStatus.FormatConditions.Delete
        
        ' Match -> Green
        rngStatus.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""Match"""
        rngStatus.FormatConditions(rngStatus.FormatConditions.Count).Interior.Color = RGB(198, 239, 206)
        
        ' Missing in XRP -> Red
        rngStatus.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""Missing in XRP"""
        rngStatus.FormatConditions(rngStatus.FormatConditions.Count).Interior.Color = RGB(255, 199, 206)
        
        ' Missing in SmartView -> Yellow
        rngStatus.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""Missing in SmartView"""
        rngStatus.FormatConditions(rngStatus.FormatConditions.Count).Interior.Color = RGB(255, 235, 156)
        
        ' Different Parent -> Blue
        rngStatus.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""Different Parent"""
        rngStatus.FormatConditions(rngStatus.FormatConditions.Count).Interior.Color = RGB(197, 217, 241)
    End If
    
    ' Create a table out of the range
    Dim comparisonTable As ListObject
    On Error Resume Next
    ' Clear existing table if re-run
    Set comparisonTable = wsOutput.ListObjects("DirectComparisonTable")
    If Not comparisonTable Is Nothing Then
        comparisonTable.Delete
    End If
    On Error GoTo 0
    
    If (outputRow - 4) <= 8000 Then
        Set comparisonTable = wsOutput.ListObjects.Add(xlSrcRange, _
            wsOutput.Range("A4:G" & (outputRow - 1)), , xlYes)
        comparisonTable.Name = "DirectComparisonTable"
        comparisonTable.TableStyle = "TableStyleMedium2"
    Else
        ' If too big, just apply AutoFilter
        wsOutput.Range("A4:G4").AutoFilter
    End If
    
    ' Summaries
    matchCount = 0
    missingXRPCount = 0
    missingSVCount = 0
    diffParentCount = 0
    
    Dim rowOut As Long
    For rowOut = 5 To outputRow - 1
        Select Case wsOutput.Cells(rowOut, 7).Value
            Case "Match": matchCount = matchCount + 1
            Case "Missing in XRP": missingXRPCount = missingXRPCount + 1
            Case "Missing in SmartView": missingSVCount = missingSVCount + 1
            Case "Different Parent": diffParentCount = diffParentCount + 1
        End Select
    Next rowOut
    
    totalCount = matchCount + missingXRPCount + missingSVCount + diffParentCount
    
    Dim summaryStart As Long
    summaryStart = outputRow + 1
    
    With wsOutput
        .Range("A" & summaryStart).Value = "Summary"
        .Range("A" & summaryStart).Font.Bold = True
        
        .Range("A" & (summaryStart + 1)).Value = "Status"
        .Range("B" & (summaryStart + 1)).Value = "Count"
        .Range("C" & (summaryStart + 1)).Value = "Percentage"
        .Range("A" & (summaryStart + 1) & ":C" & (summaryStart + 1)).Font.Bold = True
        
        .Range("A" & (summaryStart + 2)).Value = "Match"
        .Range("B" & (summaryStart + 2)).Value = matchCount
        If totalCount > 0 Then
            .Range("C" & (summaryStart + 2)).Value = matchCount / totalCount
        Else
            .Range("C" & (summaryStart + 2)).Value = 0
        End If
        .Range("C" & (summaryStart + 2)).NumberFormat = "0.0%"
        .Range("A" & (summaryStart + 2)).Interior.Color = RGB(198, 239, 206)
        
        .Range("A" & (summaryStart + 3)).Value = "Missing in XRP"
        .Range("B" & (summaryStart + 3)).Value = missingXRPCount
        If totalCount > 0 Then
            .Range("C" & (summaryStart + 3)).Value = missingXRPCount / totalCount
        Else
            .Range("C" & (summaryStart + 3)).Value = 0
        End If
        .Range("C" & (summaryStart + 3)).NumberFormat = "0.0%"
        .Range("A" & (summaryStart + 3)).Interior.Color = RGB(255, 199, 206)
        
        .Range("A" & (summaryStart + 4)).Value = "Missing in SmartView"
        .Range("B" & (summaryStart + 4)).Value = missingSVCount
        If totalCount > 0 Then
            .Range("C" & (summaryStart + 4)).Value = missingSVCount / totalCount
        Else
            .Range("C" & (summaryStart + 4)).Value = 0
        End If
        .Range("C" & (summaryStart + 4)).NumberFormat = "0.0%"
        .Range("A" & (summaryStart + 4)).Interior.Color = RGB(255, 235, 156)
        
        .Range("A" & (summaryStart + 5)).Value = "Different Parent"
        .Range("B" & (summaryStart + 5)).Value = diffParentCount
        If totalCount > 0 Then
            .Range("C" & (summaryStart + 5)).Value = diffParentCount / totalCount
        Else
            .Range("C" & (summaryStart + 5)).Value = 0
        End If
        .Range("C" & (summaryStart + 5)).NumberFormat = "0.0%"
        .Range("A" & (summaryStart + 5)).Interior.Color = RGB(197, 217, 241)
        
        .Range("A" & (summaryStart + 6)).Value = "Total"
        .Range("B" & (summaryStart + 6)).Value = totalCount
        .Range("C" & (summaryStart + 6)).Value = 1
        .Range("C" & (summaryStart + 6)).NumberFormat = "0.0%"
        .Range("A" & (summaryStart + 6) & ":C" & (summaryStart + 6)).Font.Bold = True
    End With
    
    ' Simple Legend
    Dim legendStart As Long
    legendStart = summaryStart + 8
    With wsOutput
        .Range("A" & legendStart).Value = "Legend"
        .Range("A" & legendStart).Font.Bold = True
        
        .Range("A" & (legendStart + 1)).Value = "Match"
        .Range("B" & (legendStart + 1)).Value = "Identical item with same parent in both systems"
        .Range("A" & (legendStart + 1)).Interior.Color = RGB(198, 239, 206)
        
        .Range("A" & (legendStart + 2)).Value = "Missing in XRP"
        .Range("B" & (legendStart + 2)).Value = "Item in SmartView but not found in XRP data"
        .Range("A" & (legendStart + 2)).Interior.Color = RGB(255, 199, 206)
        
        .Range("A" & (legendStart + 3)).Value = "Missing in SmartView"
        .Range("B" & (legendStart + 3)).Value = "Item in XRP data but not found in SmartView"
        .Range("A" & (legendStart + 3)).Interior.Color = RGB(255, 235, 156)
        
        .Range("A" & (legendStart + 4)).Value = "Different Parent"
        .Range("B" & (legendStart + 4)).Value = "Item in both systems with different parent (Tree only)"
        .Range("A" & (legendStart + 4)).Interior.Color = RGB(197, 217, 241)
        
        .Columns("A:B").AutoFit
    End With
    
    '-----------------------------------------------------------------------
    ' 11) FINISH LOGGING
    '-----------------------------------------------------------------------
    With wsProcessLog
        .Cells(logRow, 1).Value = Now
        .Cells(logRow, 2).Value = "CompareParents"
        .Cells(logRow, 3).Value = "Process Complete"
        .Cells(logRow, 4).Value = "SUCCESS"
        .Cells(logRow, 5).Value = "Comparison created on Sheet1"
    End With
    
    ' Optionally format the process log quickly
    FormatProcessLog wsProcessLog
    
    MsgBox "Comparison completed! See Sheet1 for results and ProcessLog3 for details.", vbInformation
End Sub

Private Sub FormatProcessLog(wsLog As Worksheet)
    Dim lastRow As Long
    lastRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row
    
    wsLog.Columns("A:E").AutoFit
    
    Dim statusRange As Range
    Set statusRange = wsLog.Range("D2:D" & lastRow)
    statusRange.FormatConditions.Delete
    
    ' Green for SUCCESS
    statusRange.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""SUCCESS"""
    statusRange.FormatConditions(statusRange.FormatConditions.Count).Interior.Color = RGB(198, 239, 206)
    
    ' Yellow for WARNING
    statusRange.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""WARNING"""
    statusRange.FormatConditions(statusRange.FormatConditions.Count).Interior.Color = RGB(255, 235, 156)
    
    ' Blue for INFO
    statusRange.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""INFO"""
    statusRange.FormatConditions(statusRange.FormatConditions.Count).Interior.Color = RGB(197, 217, 241)
    
    ' Red for ERROR
    statusRange.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""ERROR"""
    statusRange.FormatConditions(statusRange.FormatConditions.Count).Interior.Color = RGB(255, 199, 206)
    
    ' Sort by timestamp descending (optional)
    wsLog.Range("A1:E" & lastRow).Sort Key1:=wsLog.Range("A1"), Order1:=xlDescending, Header:=xlYes
End Sub
