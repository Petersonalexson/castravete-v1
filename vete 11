let
    //--------------------------------------------------------------------
    // 0) REFERENCE SMARTVIEWDATA, KEEP NEEDED COLUMNS
    //    Must have at least: KEY, Hierarchy Name, Value, Parent, Type
    //--------------------------------------------------------------------
    SourceSV = SmartViewData,
    SV = Table.SelectColumns(
        SourceSV,
        {"KEY", "Hierarchy Name", "Value", "Parent", "Type"}
    ),

    //--------------------------------------------------------------------
    // 1) LOAD & PREP XRP TREE
    //    Rename Dimension_Name -> Hierarchy Name if needed,
    //    Force columns to text, create KEY, keep only necessary columns
    //--------------------------------------------------------------------
    TreeRaw = Excel.CurrentWorkbook(){[Name="XRP_Tree_Array"]}[Content],

    // Rename Dimension_Name -> Hierarchy Name if it exists
    TreeRenamed = Table.RenameColumns(
        TreeRaw,
        {{"Dimension_Name", "Hierarchy Name"}},
        MissingField.Ignore
    ),

    // Make sure "Hierarchy Name", "Value", and "Parent" are text
    TreeAsText = Table.TransformColumnTypes(
        TreeRenamed,
        {
            {"Hierarchy Name", Text.Type},
            {"Value", Text.Type},
            {"Parent", Text.Type}
        }
    ),

    // Create KEY if not already present
    TreeWithKey = Table.AddColumn(
        TreeAsText,
        "KEY",
        each [Hierarchy Name] & " | " & [Value],
        Text.Type
    ),

    // Keep only [Hierarchy Name, Value, Parent, KEY]
    TreeSelected = Table.SelectColumns(
        TreeWithKey,
        {"Hierarchy Name", "Value", "Parent", "KEY"}
    ),

    //--------------------------------------------------------------------
    // 2) LOAD & PREP XRP LIST
    //    Rename V_S_C -> Hierarchy Name, ensure Parent column, create KEY,
    //    keep only necessary columns
    //--------------------------------------------------------------------
    ListRaw = Excel.CurrentWorkbook(){[Name="XRP_List_Array"]}[Content],

    // Rename V_S_C -> Hierarchy Name
    ListRenamed = Table.RenameColumns(
        ListRaw,
        {{"V_S_C", "Hierarchy Name"}},
        MissingField.Ignore
    ),

    // If no Parent column, add one (blank)
    ListWithParent = if not List.Contains(Table.ColumnNames(ListRenamed), "Parent")
        then Table.AddColumn(ListRenamed, "Parent", each "", Text.Type)
        else ListRenamed,

    // Force columns to text
    ListAsText = Table.TransformColumnTypes(
        ListWithParent,
        {
            {"Hierarchy Name", Text.Type},
            {"Value", Text.Type},
            {"Parent", Text.Type}
        }
    ),

    // Create KEY
    ListWithKey = Table.AddColumn(
        ListAsText,
        "KEY",
        each [Hierarchy Name] & " | " & [Value],
        Text.Type
    ),

    // Keep only [Hierarchy Name, Value, Parent, KEY]
    ListSelected = Table.SelectColumns(
        ListWithKey,
        {"Hierarchy Name", "Value", "Parent", "KEY"}
    ),

    //--------------------------------------------------------------------
    // 3) COMBINE XRP TREE + LIST
    //--------------------------------------------------------------------
    CombinedXRP = Table.Combine({TreeSelected, ListSelected}),

    //--------------------------------------------------------------------
    // 4) MERGE #1: SMARTVIEW -> CombinedXRP (Left Outer)
    //    Expand only Parent from XRP as ParentXRP, then build Status
    //--------------------------------------------------------------------
    SVLeftJoin = Table.NestedJoin(
        SV,
        {"KEY"},
        CombinedXRP,
        {"KEY"},
        "XRPData",
        JoinKind.LeftOuter
    ),
    SVExpanded = Table.ExpandTableColumn(
        SVLeftJoin,
        "XRPData",
        {"Parent"},
        {"ParentXRP"}
    ),

    // If ParentXRP=null => "Missing in ERP"
    // Else if Type="Tree" and Parent<>ParentXRP => "Different Parent"
    // Else => "Match"
    WithStatus1 = Table.AddColumn(
        SVExpanded,
        "Status",
        each if [ParentXRP] = null then
            "Missing in ERP"
        else if [Type] = "Tree" and [Parent] <> [ParentXRP] then
            "Different Parent"
        else
            "Match"
    ),

    //--------------------------------------------------------------------
    // 5) MERGE #2: CombinedXRP -> SmartView (Left Anti)
    //    Finds rows in XRP that do not exist in SmartView => "Missing in SmartView"
    //--------------------------------------------------------------------
    XRPAntiJoin = Table.NestedJoin(
        CombinedXRP,
        {"KEY"},
        SV,
        {"KEY"},
        "SVRows",
        JoinKind.LeftAnti
    ),

    // Rename Parent -> ParentXRP
    XRPRenamed = Table.RenameColumns(
        XRPAntiJoin,
        {{"Parent", "ParentXRP"}}
    ),

    // For these leftover rows, add "Parent"= "", "Status"="Missing in SmartView"
    XRPPlusParent = Table.AddColumn(
        XRPRenamed,
        "Parent",
        each "",
        Text.Type
    ),
    WithStatus2 = Table.AddColumn(
        XRPPlusParent,
        "Status",
        each "Missing in SmartView"
    ),

    //--------------------------------------------------------------------
    // 6) COMBINE THE TWO RESULT SETS & REORDER
    //--------------------------------------------------------------------
    Combined = Table.Combine({WithStatus1, WithStatus2}),

    // Final reorder: KEY, Hierarchy Name, Value, Parent, ParentXRP, Status
    Final = Table.SelectColumns(
        Combined,
        {"KEY", "Hierarchy Name", "Value", "Parent", "ParentXRP", "Status"}
    )
in
    Final
