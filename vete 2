let
    // Step 1: Import XRP File (replace with your actual file path)
    Source = Excel.Workbook(File.Contents("C:\Path\To\Your\XRPFile.xlsx"), null, true),
    
    // Step 2: Extract data from the first sheet starting at row 5 for headers
    XRPSheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
    XRPHeaders = Table.PromoteHeaders(Table.Skip(XRPSheet, 4), [PromoteAllScalars=true]),
    
    // Step 3: Select and rename relevant columns
    XRPCleanedTable = Table.SelectColumns(XRPHeaders, {"Tree Name", "Value", "Parent"}),
    XRPRenamedTable = Table.RenameColumns(XRPCleanedTable, {
        {"Tree Name", "Hierarchy"}, 
        {"Value", "XRP_Value"}, 
        {"Parent", "XRP_Parent"}
    }),
    
    // Step 4: Create Cheia column (concatenated key) for XRP data
    XRPWithCheia = Table.AddColumn(XRPRenamedTable, "XRP_Cheia", each [Hierarchy] & " | " & [XRP_Value] & " | " & [XRP_Parent], type text),
    
    // Step 5: Reference the Smart View query table (adjust the name if needed)
    SmartViewTable = Excel.CurrentWorkbook(){[Name="SmartView_FlatTable"]}[Content],
    
    // Step 6: Ensure consistent column names in Smart View data
    SmartViewRenamedTable = Table.RenameColumns(SmartViewTable, {
        {"Value", "SV_Value"}, 
        {"Parent", "SV_Parent"}
    }),
    
    // Step 7: Create Cheia column for Smart View data
    SVWithCheia = Table.AddColumn(SmartViewRenamedTable, "SV_Cheia", each [Hierarchy] & " | " & [SV_Value] & " | " & [SV_Parent], type text),
    
    // Step 8: Perform a full outer join between the tables
    // First, do a left outer join from Smart View to XRP
    LeftJoin = Table.NestedJoin(
        SVWithCheia, 
        {"Hierarchy", "SV_Value"}, 
        XRPWithCheia, 
        {"Hierarchy", "XRP_Value"}, 
        "XRPMatches", 
        JoinKind.LeftOuter
    ),
    ExpandedLeftJoin = Table.ExpandTableColumn(
        LeftJoin, 
        "XRPMatches", 
        {"XRP_Parent", "XRP_Cheia"}, 
        {"XRP_Parent", "XRP_Cheia"}
    ),
    
    // Step 9: Find items in XRP not in Smart View (right anti-join)
    RightAntiJoin = Table.NestedJoin(
        XRPWithCheia, 
        {"Hierarchy", "XRP_Value"}, 
        SVWithCheia, 
        {"Hierarchy", "SV_Value"}, 
        "SVMatches", 
        JoinKind.LeftAnti
    ),
    ExpandedRightAntiJoin = Table.ExpandTableColumn(
        RightAntiJoin, 
        "SVMatches", 
        {}, 
        {}
    ),
    
    // Step 10: Add empty columns for Smart View data in right anti-join
    RightAntiJoinWithColumns = Table.AddColumn(ExpandedRightAntiJoin, "SV_Value", each null, type text),
    RightAntiJoinWithMoreColumns = Table.AddColumn(RightAntiJoinWithColumns, "SV_Parent", each null, type text),
    RightAntiJoinComplete = Table.AddColumn(RightAntiJoinWithMoreColumns, "SV_Cheia", each null, type text),
    
    // Step 11: Rename columns in right anti-join to match left join
    RightAntiJoinRenamed = Table.RenameColumns(RightAntiJoinComplete, {
        {"XRP_Value", "SV_Value"}, 
        {"XRP_Parent", "XRP_Parent"}, 
        {"XRP_Cheia", "XRP_Cheia"}
    }),
    
    // Step 12: Combine both results
    CombinedResults = Table.Combine({ExpandedLeftJoin, RightAntiJoinRenamed}),
    
    // Step 13: Add Status column
    WithStatus = Table.AddColumn(CombinedResults, "Status", each 
        if [SV_Value] = null then "Missing in Smart View"
        else if [XRP_Parent] = null then "Missing in XRP"
        else if [SV_Parent] <> [XRP_Parent] then "Different Parent"
        else "Match"
    ),
    
    // Step 14: Reorder and select final columns
    ReorderedColumns = Table.ReorderColumns(WithStatus, {
        "Hierarchy", "SV_Value", "SV_Parent", "XRP_Parent", "Status"
    }),
    
    // Step 15: Sort by Hierarchy and Status
    SortedTable = Table.Sort(ReorderedColumns, {
        {"Hierarchy", Order.Ascending}, 
        {"Status", Order.Ascending}
    })
in
    SortedTable
