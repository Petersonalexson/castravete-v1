Public Function CreateXRPArrays() As Boolean
    ' Function to ensure XRP Arrays exist
    ' Returns True if successful, False if error occurs
    
    On Error GoTo ErrorHandler
    
    Dim wsXRPArrays As Worksheet
    Dim treeArrayExists As Boolean
    Dim listArrayExists As Boolean
    
    ' Check if arrays worksheet exists
    On Error Resume Next
    Set wsXRPArrays = ThisWorkbook.Worksheets("XRP_Arrays")
    On Error GoTo ErrorHandler
    
    ' If worksheet doesn't exist, create it
    If wsXRPArrays Is Nothing Then
        Set wsXRPArrays = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsXRPArrays.Name = "XRP_Arrays"
    End If
    
    ' Check if named ranges exist
    On Error Resume Next
    treeArrayExists = Not (ThisWorkbook.Names("XRP_Tree_Array") Is Nothing)
    listArrayExists = Not (ThisWorkbook.Names("XRP_List_Array") Is Nothing)
    On Error GoTo ErrorHandler
    
    ' If either array doesn't exist, create default arrays
    If Not (treeArrayExists And listArrayExists) Then
        ' Clear worksheet
        wsXRPArrays.Cells.Clear
        
        ' Create Tree array if needed
        If Not treeArrayExists Then
            ' Set up headers
            With wsXRPArrays
                .Range("A1").Value = "XRP Tree Data"
                .Range("A1").Font.Bold = True
                .Range("A1").Font.Size = 14
                
                .Range("A3").Value = "Tree_Name"
                .Range("B3").Value = "Value"
                .Range("C3").Value = "Parent"
                .Range("D3").Value = "V_S_C"
                .Range("A3:D3").Font.Bold = True
                .Range("A3:D3").Interior.Color = RGB(200, 200, 200)
                
                ' Create a single dummy row for structure
                .Range("A4").Value = "Sample_Tree"
                .Range("B4").Value = "Sample_Value"
                .Range("C4").Value = "Sample_Parent"
                .Range("D4").Value = "Sample_V_S_C"
                
                ' Create named range
                On Error Resume Next
                ThisWorkbook.Names("XRP_Tree_Array").Delete
                On Error GoTo ErrorHandler
                ThisWorkbook.Names.Add Name:="XRP_Tree_Array", RefersTo:=.Range("A3:D4")
            End With
        End If
        
        ' Create List array if needed
        If Not listArrayExists Then
            ' Set up headers
            With wsXRPArrays
                .Range("F1").Value = "XRP List Data"
                .Range("F1").Font.Bold = True
                .Range("F1").Font.Size = 14
                
                .Range("F3").Value = "Value"
                .Range("G3").Value = "V_S_C"
                .Range("F3:G3").Font.Bold = True
                .Range("F3:G3").Interior.Color = RGB(200, 200, 200)
                
                ' Create a single dummy row for structure
                .Range("F4").Value = "Sample_Value"
                .Range("G4").Value = "Sample_V_S_C"
                
                ' Create named range
                On Error Resume Next
                ThisWorkbook.Names("XRP_List_Array").Delete
                On Error GoTo ErrorHandler
                ThisWorkbook.Names.Add Name:="XRP_List_Array", RefersTo:=.Range("F3:G4")
            End With
        End If
        
        ' Format and autofit
        wsXRPArrays.Columns("A:G").AutoFit
    End If
    
    ' Success
    CreateXRPArrays = True
    Exit Function
    
ErrorHandler:
    MsgBox "Error creating XRP arrays: " & Err.Description, vbExclamation, "Array Creation Error"
    CreateXRPArrays = False
End Function

Public Sub PopulateXRPArrays()
    ' Main sub to populate XRP arrays with real data
    
    ' First ensure arrays exist
    If Not CreateXRPArrays() Then
        MsgBox "Could not create the necessary XRP array structures.", vbExclamation
        Exit Sub
    End If
    
    ' Get path for XRP Tree file
    Dim xrpTreePath As String
    xrpTreePath = InputBox("Enter the full path to the XRP Tree file:", "XRP Tree File", "C:\Path\To\Your\XRPTreeFile.xlsx")
    
    If xrpTreePath = "" Then
        MsgBox "No path provided for XRP Tree file. Using sample data only.", vbInformation
    Else
        ' Import XRP Tree data
        ImportXRPTreeData xrpTreePath
    End If
    
    ' Get path for XRP List file
    Dim xrpListPath As String
    xrpListPath = InputBox("Enter the full path to the XRP List file:", "XRP List File", "C:\Path\To\Your\XRPListFile.xlsx")
    
    If xrpListPath = "" Then
        MsgBox "No path provided for XRP List file. Using sample data only.", vbInformation
    Else
        ' Import XRP List data
        ImportXRPListData xrpListPath
    End If
    
    MsgBox "XRP arrays have been populated and are ready for use.", vbInformation
End Sub

Private Sub ImportXRPTreeData(xrpTreePath As String)
    ' Import data from XRP Tree file into the array
    On Error Resume Next
    Dim xrpTreeWorkbook As Workbook
    Dim treeSheet As Worksheet
    Dim wsXRPArrays As Worksheet
    Dim treeLastRow As Long
    Dim i As Long
    
    ' Open XRP Tree file
    Set xrpTreeWorkbook = Workbooks.Open(xrpTreePath, ReadOnly:=True)
    If Err.Number <> 0 Then
        MsgBox "Could not open XRP Tree file: " & xrpTreePath & vbCrLf & Err.Description, vbExclamation
        Exit Sub
    End If
    
    ' Get first sheet
    Set treeSheet = xrpTreeWorkbook.Sheets(1)
    Set wsXRPArrays = ThisWorkbook.Worksheets("XRP_Arrays")
    
    ' Clear existing data (except headers)
    wsXRPArrays.Range("A4:D" & wsXRPArrays.Rows.Count).ClearContents
    
    ' Find data range
    treeLastRow = treeSheet.Cells(treeSheet.Rows.Count, "A").End(xlUp).Row
    
    ' Check if there's data to process
    If treeLastRow < 6 Then
        MsgBox "No data found in the XRP Tree file (beyond row 5).", vbExclamation
        xrpTreeWorkbook.Close SaveChanges:=False
        Exit Sub
    End If
    
    ' Copy data to array sheet
    Dim targetRow As Long
    targetRow = 4 ' Start after headers
    
    For i = 6 To treeLastRow
        wsXRPArrays.Cells(targetRow, 1).Value = treeSheet.Cells(i, 1).Value ' Tree_Name (A)
        wsXRPArrays.Cells(targetRow, 2).Value = treeSheet.Cells(i, 2).Value ' Value (B)
        wsXRPArrays.Cells(targetRow, 3).Value = treeSheet.Cells(i, 3).Value ' Parent (C)
        wsXRPArrays.Cells(targetRow, 4).Value = treeSheet.Cells(i, 8).Value ' V_S_C (H)
        targetRow = targetRow + 1
    Next i
    
    ' Update named range
    Dim finalRow As Long
    finalRow = wsXRPArrays.Cells(wsXRPArrays.Rows.Count, "A").End(xlUp).Row
    
    ' Delete and recreate named range
    On Error Resume Next
    ThisWorkbook.Names("XRP_Tree_Array").Delete
    On Error GoTo 0
    
    ' Create named range with actual data
    ThisWorkbook.Names.Add Name:="XRP_Tree_Array", RefersTo:=wsXRPArrays.Range("A3:D" & finalRow)
    
    ' Close workbook
    xrpTreeWorkbook.Close SaveChanges:=False
End Sub

Private Sub ImportXRPListData(xrpListPath As String)
    ' Import data from XRP List file into the array
    On Error Resume Next
    Dim xrpListWorkbook As Workbook
    Dim listSheet As Worksheet
    Dim wsXRPArrays As Worksheet
    Dim listLastRow As Long
    Dim i As Long
    
    ' Open XRP List file
    Set xrpListWorkbook = Workbooks.Open(xrpListPath, ReadOnly:=True)
    If Err.Number <> 0 Then
        MsgBox "Could not open XRP List file: " & xrpListPath & vbCrLf & Err.Description, vbExclamation
        Exit Sub
    End If
    
    ' Get first sheet
    Set listSheet = xrpListWorkbook.Sheets(1)
    Set wsXRPArrays = ThisWorkbook.Worksheets("XRP_Arrays")
    
    ' Clear existing data (except headers)
    wsXRPArrays.Range("F4:G" & wsXRPArrays.Rows.Count).ClearContents
    
    ' Find data range (using column B as it should always have data)
    listLastRow = listSheet.Cells(listSheet.Rows.Count, "B").End(xlUp).Row
    
    ' Check if there's data to process
    If listLastRow < 6 Then
        MsgBox "No data found in the XRP List file (beyond row 5).", vbExclamation
        xrpListWorkbook.Close SaveChanges:=False
        Exit Sub
    End If
    
    ' Copy data to array sheet
    Dim targetRow As Long
    targetRow = 4 ' Start after headers
    
    For i = 6 To listLastRow
        wsXRPArrays.Cells(targetRow, 6).Value = listSheet.Cells(i, 2).Value ' Value (B)
        wsXRPArrays.Cells(targetRow, 7).Value = listSheet.Cells(i, 8).Value ' V_S_C (H)
        targetRow = targetRow + 1
    Next i
    
    ' Update named range
    Dim finalRow As Long
    finalRow = wsXRPArrays.Cells(wsXRPArrays.Rows.Count, "F").End(xlUp).Row
    
    ' Delete and recreate named range
    On Error Resume Next
    ThisWorkbook.Names("XRP_List_Array").Delete
    On Error GoTo 0
    
    ' Create named range with actual data
    ThisWorkbook.Names.Add Name:="XRP_List_Array", RefersTo:=wsXRPArrays.Range("F3:G" & finalRow)
    
    ' Close workbook
    xrpListWorkbook.Close SaveChanges:=False
End Sub
