let
    // Step 1: Reference the SmartView data
    SmartViewData = SmartViewData,
    
    // Step 2: Reference the XRP arrays created by ImportXRPDataAsArrays VBA procedure
    XRPTreeArray = Excel.CurrentWorkbook(){[Name="XRP_Tree_Array"]}[Content],
    XRPListArray = Excel.CurrentWorkbook(){[Name="XRP_List_Array"]}[Content],
    
    // Step A: Skip the header rows from arrays (header is row 1)
    XRPTreeData = Table.Skip(XRPTreeArray, 1),
    XRPListData = Table.Skip(XRPListArray, 1),
    
    // Step B: Get the header rows
    XRPTreeHeader = Table.FirstN(XRPTreeArray, 1),
    XRPListHeader = Table.FirstN(XRPListArray, 1),
    
    // Step C: Use the header rows to rename columns
    XRPTreeHeaderNames = Table.ToRecords(XRPTreeHeader){0},
    XRPListHeaderNames = Table.ToRecords(XRPListHeader){0},
    
    XRPTreeColumnNames = Record.FieldNames(XRPTreeHeaderNames),
    XRPListColumnNames = Record.FieldNames(XRPListHeaderNames),
    
    // Step 3: Process Tree data - use column positions here
    XRPTreeWithNames = Table.RenameColumns(XRPTreeData, 
        List.Transform(
            {0..List.Count(XRPTreeColumnNames)-1},
            each {Text.From(_), XRPTreeColumnNames{_}}
        )
    ),
    
    // Create structured Tree table
    XRPTreeStructured = Table.TransformColumnTypes(XRPTreeWithNames, List.Transform(XRPTreeColumnNames, each {_, type text})),
    
    // Add Type and format columns
    XRPTreeTyped = Table.AddColumn(XRPTreeStructured, "Type", each "Tree", type text),
    
    // Add KEY column to Tree data
    XRPTreeWithKey = Table.AddColumn(XRPTreeTyped, "KEY", each 
        Text.From(if Table.HasColumns(XRPTreeTyped, "Tree_Name") then [Tree_Name] 
                  else if Table.HasColumns(XRPTreeTyped, "Dimension_Name") then [Dimension_Name] 
                  else "") & " | " & Text.From([Value]), 
        type text
    ),
    
    // Set Hierarchy Name for Tree Data
    XRPTreeFinal = Table.AddColumn(XRPTreeWithKey, "Hierarchy Name", each 
        if Table.HasColumns(XRPTreeTyped, "Tree_Name") then [Tree_Name]
        else if Table.HasColumns(XRPTreeTyped, "Dimension_Name") then [Dimension_Name]
        else "",
        type text
    ),
    
    // Step 4: Process List data
    XRPListWithNames = Table.RenameColumns(XRPListData, 
        List.Transform(
            {0..List.Count(XRPListColumnNames)-1},
            each {Text.From(_), XRPListColumnNames{_}}
        )
    ),
    
    // Create structured List table
    XRPListStructured = Table.TransformColumnTypes(XRPListWithNames, List.Transform(XRPListColumnNames, each {_, type text})),
    
    // Add Type and format columns
    XRPListTyped = Table.AddColumn(XRPListStructured, "Type", each "List", type text),
    
    // For List data, Hierarchy Name = V_S_C and Parent is blank
    XRPListWithHierarchy = Table.AddColumn(XRPListTyped, "Hierarchy Name", each [V_S_C], type text),
    XRPListWithParent = Table.AddColumn(XRPListWithHierarchy, "Parent", each "", type text),
    
    // Add KEY column to List data
    XRPListWithKey = Table.AddColumn(XRPListWithParent, "KEY", each [Hierarchy Name] & " | " & Text.From([Value]), type text),
    
    // Step 5: Select columns we need from both datasets
    XRPTreeSelected = Table.SelectColumns(XRPTreeFinal, {"Type", "V_S_C", "Hierarchy Name", "Value", "Parent", "KEY"}),
    XRPListSelected = Table.SelectColumns(XRPListWithKey, {"Type", "V_S_C", "Hierarchy Name", "Value", "Parent", "KEY"}),
    
    // Step 6: Combine both XRP data sources
    CombinedXRP = Table.Combine({XRPTreeSelected, XRPListSelected}),
    
    // Step 7: Ensure SmartView data has proper KEY column format
    SmartViewWithKey = if Table.HasColumns(SmartViewData, "KEY") then 
                          SmartViewData 
                       else 
                          Table.AddColumn(SmartViewData, "KEY", each [Hierarchy Name] & " | " & Text.From([Value]), type text),
    
    // Step 8: Separate SmartView data by Type
    SVTree = Table.SelectRows(SmartViewWithKey, each [Type] = "Tree"),
    SVList = Table.SelectRows(SmartViewWithKey, each [Type] = "List"),
    
    // Step 9: Separate XRP data by Type
    XRPTree = Table.SelectRows(CombinedXRP, each [Type] = "Tree"),
    XRPList = Table.SelectRows(CombinedXRP, each [Type] = "List"),
    
    // Step 10: Join Tree data
    SVTreeJoin = Table.NestedJoin(
        SVTree,
        {"V_S_C", "KEY"},
        XRPTree,
        {"V_S_C", "KEY"},
        "XRPMatches",
        JoinKind.LeftOuter
    ),
    
    SVTreeWithXRP = Table.ExpandTableColumn(
        SVTreeJoin,
        "XRPMatches",
        {"Parent"},
        {"XRP_Parent"}
    ),
    
    // Step 11: Join List data 
    SVListJoin = Table.NestedJoin(
        SVList,
        {"V_S_C", "KEY"},
        XRPList,
        {"V_S_C", "KEY"},
        "XRPMatches",
        JoinKind.LeftOuter
    ),
    
    SVListWithXRP = Table.ExpandTableColumn(
        SVListJoin,
        "XRPMatches",
        {"Parent"},
        {"XRP_Parent"}
    ),
    
    // Step 12: Combine joined SmartView results
    CombinedSVWithXRP = Table.Combine({SVTreeWithXRP, SVListWithXRP}),
    
    // Step 13: Find XRP items not in SmartView
    XRPTreeAnti = Table.NestedJoin(
        XRPTree,
        {"V_S_C", "KEY"},
        SVTree,
        {"V_S_C", "KEY"},
        "SVMatches",
        JoinKind.LeftAnti
    ),
    
    XRPTreeAntiCleaned = Table.RemoveColumns(XRPTreeAnti, {"SVMatches"}),
    
    XRPListAnti = Table.NestedJoin(
        XRPList,
        {"V_S_C", "KEY"},
        SVList,
        {"V_S_C", "KEY"},
        "SVMatches",
        JoinKind.LeftAnti
    ),
    
    XRPListAntiCleaned = Table.RemoveColumns(XRPListAnti, {"SVMatches"}),
    
    // Step 14: Combine XRP-only items
    CombinedXRPOnly = Table.Combine({XRPTreeAntiCleaned, XRPListAntiCleaned}),
    
    // Step 15: Add placeholder SmartView columns to XRP-only data
    XRPOnlyWithSVValue = Table.AddColumn(CombinedXRPOnly, "SV_Value", each null, type text),
    XRPOnlyWithSVParent = Table.AddColumn(XRPOnlyWithSVValue, "SV_Parent", each null, type text),
    
    // Step 16: Rename columns for consistency in the SmartView data
    SVWithXRPRenamed = Table.RenameColumns(CombinedSVWithXRP, {
        {"Value", "SV_Value"},
        {"Parent", "SV_Parent"}
    }),
    
    // Step 17: Combine all results
    AllResults = Table.Combine({SVWithXRPRenamed, XRPOnlyWithSVParent}),
    
    // Step 18: Add Status column
    WithStatus = Table.AddColumn(AllResults, "Status", each
        if [SV_Value] = null then "Missing in SmartView"
        else if [XRP_Parent] = null then "Missing in XRP"
        else if [Type] = "Tree" and [SV_Parent] <> [XRP_Parent] then "Different Parent"
        else "Match",
        type text
    ),
    
    // Step 19: Select and rename final columns
    FinalColumns = Table.SelectColumns(WithStatus, {
        "Type", "V_S_C", "Hierarchy Name", "SV_Value", "SV_Parent", "XRP_Parent", "Status"
    }),
    
    FinalRenamed = Table.RenameColumns(FinalColumns, {
        {"SV_Value", "Value"},
        {"SV_Parent", "SmartView Parent"},
        {"XRP_Parent", "XRP Parent"}
    }),
    
    // Step 20: Sort results
    SortedResults = Table.Sort(FinalRenamed, {
        {"Type", Order.Ascending},
        {"V_S_C", Order.Ascending},
        {"Hierarchy Name", Order.Ascending},
        {"Status", Order.Ascending}
    })
in
    SortedResults
