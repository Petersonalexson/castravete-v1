let
    // -------------------------------------------------------------------
    // 0) REFERENCE THE EXISTING SMARTVIEWDATA QUERY
    //    We assume it has: KEY, Type, Parent, Value, Hierarchy Name, etc.
    // -------------------------------------------------------------------
    SV = SmartViewData,

    // -------------------------------------------------------------------
    // 1) LOAD & COMBINE XRP TREE + LIST INTO "CombinedXRP"
    // -------------------------------------------------------------------
    // ---- 1a) XRP Tree
    XRPTreeRaw = Excel.CurrentWorkbook(){[Name="XRP_Tree_Array"]}[Content],
    XRPTreePromoted = Table.PromoteHeaders(XRPTreeRaw),
    // Rename Dimension_Name->Hierarchy Name if needed
    XRPTreeRenamed = Table.RenameColumns(
        XRPTreePromoted,
        {{"Dimension_Name", "Hierarchy Name"}},
        MissingField.Ignore
    ),
    // Ensure Parent is text
    XRPTreeParentAsText = Table.TransformColumnTypes(XRPTreeRenamed, {{"Parent", type text}}),
    // Add KEY = [Hierarchy Name] | [Value]
    XRPTreeWithKey = Table.AddColumn(
        XRPTreeParentAsText,
        "KEY",
        each Text.From([Hierarchy Name]) & " | " & Text.From([Value]),
        type text
    ),
    // Mark Type=Tree in ERP side
    XRPTree = Table.AddColumn(
        XRPTreeWithKey,
        "ERP_Type",
        each "Tree",
        type text
    ),

    // ---- 1b) XRP List
    XRPListRaw = Excel.CurrentWorkbook(){[Name="XRP_List_Array"]}[Content],
    XRPListPromoted = Table.PromoteHeaders(XRPListRaw),
    // Possibly rename columns if needed: e.g., Column1->Value, Column2->V_S_C
    XRPListRenamed = XRPListPromoted,
    // Add blank Parent
    XRPListWithParent = Table.AddColumn(
        XRPListRenamed,
        "Parent",
        each "",
        type text
    ),
    // Add "Hierarchy Name" = [V_S_C], if that's desired
    XRPListWithHierarchy = Table.AddColumn(
        XRPListWithParent,
        "Hierarchy Name",
        each Text.From([V_S_C]),
        type text
    ),
    // Add KEY = [Hierarchy Name] | [Value]
    XRPListWithKey = Table.AddColumn(
        XRPListWithHierarchy,
        "KEY",
        each [Hierarchy Name] & " | " & Text.From([Value]),
        type text
    ),
    // Mark Type=List
    XRPList = Table.AddColumn(
        XRPListWithKey,
        "ERP_Type",
        each "List",
        type text
    ),

    // ---- 1c) Combine them
    CombinedXRP = Table.Combine({XRPTree, XRPList}),

    // -------------------------------------------------------------------
    // 2) MERGE #1: SMARTVIEWDATA -> CombinedXRP (Left Outer)
    //    This identifies rows in SV that either match ERP or are missing in ERP
    // -------------------------------------------------------------------
    SVLeftJoin = Table.NestedJoin(
        SV,                    // left
        {"KEY"},               // key in SmartView
        CombinedXRP,           // right
        {"KEY"},               // key in ERP
        "ERPData",
        JoinKind.LeftOuter
    ),
    // Expand the ERP columns we need, primarily Parent, ERP_Type
    ExpandERP = Table.ExpandTableColumn(
        SVLeftJoin,
        "ERPData",
        {"Parent", "ERP_Type"},
        {"ERP_Parent", "ERP_Type"}
    ),
    // 2b) Add a Status column for these rows
    //    If no match => ERP_Parent=null => "Missing in ERP"
    //    If Type=Tree & parents differ => "Different Parent"
    //    Else "Match" (for anything that does have ERP_Parent)
    //    For List, we typically won't do "Different Parent" check, but you can skip or unify logic
    WithStatus1 = Table.AddColumn(
        ExpandERP,
        "Status",
        each
            if [ERP_Parent] = null then
                "Missing in ERP"
            else if [Type] = "Tree" and [Parent] <> [ERP_Parent] then
                "Different Parent"
            else
                "Match"
    ),

    // -------------------------------------------------------------------
    // 3) MERGE #2: CombinedXRP -> SmartViewData (Left Anti)
    //    This finds items that exist in ERP but do NOT exist in SmartView
    // -------------------------------------------------------------------
    ERPAntiJoin = Table.NestedJoin(
        CombinedXRP,
        {"KEY"},
        SV,
        {"KEY"},
        "SVMatches",
        JoinKind.LeftAnti
    ),
    // We don't need to expand anything. If a row is here, it means it's missing in SV
    // Let's rename "Parent" to "ERP_Parent" for clarity
    ERPWithRenamedParent = Table.RenameColumns(ERPAntiJoin, {{"Parent", "ERP_Parent"}}),

    // Add "Status" = "Missing in SmartView"
    WithStatus2 = Table.AddColumn(
        ERPWithRenamedParent,
        "Status",
        each "Missing in SmartView"
    ),

    // -------------------------------------------------------------------
    // 4) COMBINE THE TWO RESULT SETS INTO A SINGLE TABLE
    // -------------------------------------------------------------------
    FinalCombined = Table.Combine({WithStatus1, WithStatus2}),

    // -------------------------------------------------------------------
    // 5) OPTIONAL: Reorder or rename columns
    // -------------------------------------------------------------------
    Reordered = Table.ReorderColumns(
        FinalCombined,
        {
            "Status",
            "KEY",
            "Type",
            "Parent",
            "ERP_Type",
            "ERP_Parent"
            // plus any others like Value, Hierarchy Name, etc. if needed
        },
        MissingField.Ignore
    )
in
    Reordered
