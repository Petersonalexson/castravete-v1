let
    // -----------------------------------------------------------
    // 0) SMARTVIEWDATA: Keep {Hierarchy Name, Value, Parent},
    //    Convert them to text, TRIM & UPPER to unify.
    // -----------------------------------------------------------
    SVRaw = SmartViewData,
    SVSelected = Table.SelectColumns(
        SVRaw,
        {"Hierarchy Name", "Value", "Parent"}
    ),
    SVAsText = Table.TransformColumnTypes(
        SVSelected,
        {
            {"Hierarchy Name", Text.Type},
            {"Value", Text.Type},
            {"Parent", Text.Type}
        }
    ),
    SVClean = Table.TransformColumns(
        SVAsText,
        {
            {"Hierarchy Name", each Text.Upper(Text.Trim(_)), Text.Type},
            {"Value", each Text.Upper(Text.Trim(_)), Text.Type},
            {"Parent", each Text.Upper(Text.Trim(_)), Text.Type}
        }
    ),

    // -----------------------------------------------------------
    // 1) PREP XRP TREE
    //    - Rename Dimension_Name -> Hierarchy Name if it exists
    //    - Force text, TRIM & UPPER
    // -----------------------------------------------------------
    XRPTreeRaw = Excel.CurrentWorkbook(){[Name="XRP_Tree_Array"]}[Content],
    XRPTreeRenamed = Table.RenameColumns(
        XRPTreeRaw,
        {{"Dimension_Name", "Hierarchy Name"}},
        MissingField.Ignore
    ),
    XRPTreeAsText = Table.TransformColumnTypes(
        XRPTreeRenamed,
        {
            {"Hierarchy Name", Text.Type},
            {"Value", Text.Type},
            {"Parent", Text.Type}
        }
    ),
    XRPTreeClean = Table.TransformColumns(
        XRPTreeAsText,
        {
            {"Hierarchy Name", each Text.Upper(Text.Trim(_)), Text.Type},
            {"Value", each Text.Upper(Text.Trim(_)), Text.Type},
            {"Parent", each Text.Upper(Text.Trim(_)), Text.Type}
        }
    ),

    // -----------------------------------------------------------
    // 2) PREP XRP LIST
    //    - Rename V_S_C -> Hierarchy Name
    //    - Ensure Parent column
    //    - Force text, TRIM & UPPER
    // -----------------------------------------------------------
    XRPListRaw = Excel.CurrentWorkbook(){[Name="XRP_List_Array"]}[Content],
    XRPListRenamed = Table.RenameColumns(
        XRPListRaw,
        {{"V_S_C", "Hierarchy Name"}},
        MissingField.Ignore
    ),
    XRPListEnsureParent = if not List.Contains(Table.ColumnNames(XRPListRenamed), "Parent") 
        then Table.AddColumn(XRPListRenamed, "Parent", each "", Text.Type)
        else XRPListRenamed,
    XRPListAsText = Table.TransformColumnTypes(
        XRPListEnsureParent,
        {
            {"Hierarchy Name", Text.Type},
            {"Value", Text.Type},
            {"Parent", Text.Type}
        }
    ),
    XRPListClean = Table.TransformColumns(
        XRPListAsText,
        {
            {"Hierarchy Name", each Text.Upper(Text.Trim(_)), Text.Type},
            {"Value", each Text.Upper(Text.Trim(_)), Text.Type},
            {"Parent", each Text.Upper(Text.Trim(_)), Text.Type}
        }
    ),

    // -----------------------------------------------------------
    // 3) COMBINE XRP TREE + LIST
    // -----------------------------------------------------------
    XRPCombined = Table.Combine({XRPTreeClean, XRPListClean}),

    // -----------------------------------------------------------
    // 4) INNER JOIN ON {Hierarchy Name, Value}
    //    Expand Parent => "Parent.1"
    // -----------------------------------------------------------
    InnerJoin = Table.NestedJoin(
        SVClean,
        {"Hierarchy Name", "Value"},
        XRPCombined,
        {"Hierarchy Name", "Value"},
        "XRPRows",
        JoinKind.Inner
    ),
    Expanded = Table.ExpandTableColumn(
        InnerJoin,
        "XRPRows",
        {"Parent"},
        {"Parent.1"}
    ),

    // -----------------------------------------------------------
    // 5) STATUS LOGIC:
    //    If both parents are blank => "Mismatch"
    //    Else if they are equal => "Match"
    //    Else => "Mismatch"
    // -----------------------------------------------------------
    WithStatus = Table.AddColumn(
        Expanded,
        "Status",
        each
            let
                svParent = [Parent] & "",    // null-safe
                xrpParent = [Parent.1] & ""
            in
                if svParent = "" and xrpParent = "" then
                    "Mismatch"
                else if svParent = xrpParent then
                    "Match"
                else
                    "Mismatch"
    ),

    // -----------------------------------------------------------
    // 6) FINAL COLUMNS
    // -----------------------------------------------------------
    Final = Table.SelectColumns(
        WithStatus,
        {
            "Hierarchy Name",
            "Value",
            "Parent",
            "Parent.1",
            "Status"
        }
    )
in
    Final
