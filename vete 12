let
    //--------------------------------------------------------------------
    // 0) REFERENCE SMARTVIEWDATA
    //    Keep only Hierarchy Name, Value, Parent. Trim & Upper to unify
    //--------------------------------------------------------------------
    SVRaw = SmartViewData,

    SVSelected = Table.SelectColumns(
        SVRaw,
        {"Hierarchy Name", "Value", "Parent"}
    ),

    // Convert to Text, then Trim & Upper
    SVAsText = Table.TransformColumnTypes(
        SVSelected,
        {
            {"Hierarchy Name", Text.Type},
            {"Value", Text.Type},
            {"Parent", Text.Type}
        }
    ),

    SVClean = Table.TransformColumns(
        SVAsText,
        {
            {"Hierarchy Name", each Text.Upper(Text.Trim(_)), Text.Type},
            {"Value", each Text.Upper(Text.Trim(_)), Text.Type},
            {"Parent", each Text.Upper(Text.Trim(_)), Text.Type}
        }
    ),

    //--------------------------------------------------------------------
    // 1) PREP XRP TREE (Dimension_Name -> Hierarchy Name, trim/upper)
    //--------------------------------------------------------------------
    XRPTreeRaw = Excel.CurrentWorkbook(){[Name="XRP_Tree_Array"]}[Content],

    // If "Dimension_Name" is your old column name, rename it to "Hierarchy Name"
    XRPTreeRenamed = Table.RenameColumns(
        XRPTreeRaw,
        {{"Dimension_Name", "Hierarchy Name"}},
        MissingField.Ignore
    ),

    // Force text, then Trim & Upper
    XRPTreeAsText = Table.TransformColumnTypes(
        XRPTreeRenamed,
        {
            {"Hierarchy Name", Text.Type},
            {"Value", Text.Type},
            {"Parent", Text.Type}
        }
    ),

    XRPTreeClean = Table.TransformColumns(
        XRPTreeAsText,
        {
            {"Hierarchy Name", each Text.Upper(Text.Trim(_)), Text.Type},
            {"Value", each Text.Upper(Text.Trim(_)), Text.Type},
            {"Parent", each Text.Upper(Text.Trim(_)), Text.Type}
        }
    ),

    //--------------------------------------------------------------------
    // 2) PREP XRP LIST (V_S_C -> Hierarchy Name, add blank Parent if missing)
    //--------------------------------------------------------------------
    XRPListRaw = Excel.CurrentWorkbook(){[Name="XRP_List_Array"]}[Content],

    // Rename V_S_C -> Hierarchy Name
    XRPListRenamed = Table.RenameColumns(
        XRPListRaw,
        {{"V_S_C", "Hierarchy Name"}},
        MissingField.Ignore
    ),

    // Ensure we have a Parent column (blank if missing)
    XRPListWithParent = if not List.Contains(Table.ColumnNames(XRPListRenamed), "Parent") 
        then Table.AddColumn(XRPListRenamed, "Parent", each "", Text.Type)
        else XRPListRenamed,

    // Force text, Trim & Upper
    XRPListAsText = Table.TransformColumnTypes(
        XRPListWithParent,
        {
            {"Hierarchy Name", Text.Type},
            {"Value", Text.Type},
            {"Parent", Text.Type}
        }
    ),

    XRPListClean = Table.TransformColumns(
        XRPListAsText,
        {
            {"Hierarchy Name", each Text.Upper(Text.Trim(_)), Text.Type},
            {"Value", each Text.Upper(Text.Trim(_)), Text.Type},
            {"Parent", each Text.Upper(Text.Trim(_)), Text.Type}
        }
    ),

    //--------------------------------------------------------------------
    // 3) COMBINE XRP TREE + LIST
    //    We'll just call it "XRPCombined"
    //--------------------------------------------------------------------
    XRPCombined = Table.Combine({XRPTreeClean, XRPListClean}),

    //--------------------------------------------------------------------
    // 4) INNER JOIN ON {Hierarchy Name, Value}
    //    Expand Parent from the XRP side => "ParentXRP"
    //--------------------------------------------------------------------
    // This only returns rows that exist in both SmartViewData and XRP
    InnerJoin = Table.NestedJoin(
        SVClean,
        {"Hierarchy Name", "Value"},
        XRPCombined,
        {"Hierarchy Name", "Value"},
        "XRPRows",
        JoinKind.Inner
    ),

    Expanded = Table.ExpandTableColumn(
        InnerJoin,
        "XRPRows",
        {"Parent"},
        {"ParentXRP"}
    ),

    //--------------------------------------------------------------------
    // 5) ADD STATUS: Compare Parent vs. ParentXRP
    //--------------------------------------------------------------------
    WithStatus = Table.AddColumn(
        Expanded,
        "Status",
        each if [Parent] = [ParentXRP] 
             then "Match"
             else "Mismatch"
    ),

    //--------------------------------------------------------------------
    // 6) SELECT FINAL COLUMNS
    //--------------------------------------------------------------------
    Final = Table.SelectColumns(
        WithStatus,
        {
            "Hierarchy Name",
            "Value",
            "Parent",
            "ParentXRP",
            "Status"
        }
    )
in
    Final
