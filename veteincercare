let
    SV_Original = SmartViewData_Comp,
    SVRenamed = Table.RenameColumns(
        SV_Original,
        {{"Parent", "SmartView Parent"}},
        MissingField.Ignore
    ),
    SVSelected = Table.SelectColumns(
        SVRenamed,
        {"KEY", "Hierarchy Name", "Value", "SmartView Parent", "SmartView Path"}
    ),
    XRPOriginal = XRPData_Comp,
    XRPRenamed = Table.RenameColumns(
        XRPOriginal,
        {{"Parent", "XRP Parent"}},
        MissingField.Ignore
    ),
    XRPSelected = Table.SelectColumns(
        XRPRenamed,
        {"KEY", "XRP Parent", "XRP Path"}
    ),
    FullJoin = Table.NestedJoin(
        SVSelected,
        {"KEY"},
        XRPSelected,
        {"KEY"},
        "XRPData",
        JoinKind.FullOuter
    ),
    Expanded = Table.ExpandTableColumn(
        FullJoin,
        "XRPData",
        {"KEY", "XRP Parent", "XRP Path"},
        {"XRP KEY", "XRP Parent", "XRP Path"}
    ),
    WithNewKey = Table.AddColumn(
        Expanded,
        "NewKEY",
        each if [KEY] <> null then [KEY] else [XRP KEY]
    ),
    RemovedOldKey = Table.RemoveColumns(WithNewKey, {"KEY"}),
    RenamedKey = Table.RenameColumns(RemovedOldKey, {{"NewKEY", "KEY"}}),
    WithTempText = Table.AddColumn(
        RenamedKey,
        "TempKeyText",
        each
            if [Hierarchy Name] = null and [KEY] <> null then
                let
                    rawSplit = Text.Split([KEY], "/"),
                    lastSegment = List.Last(rawSplit)
                in
                    Text.Trim(lastSegment)
            else
                null
    ),
    WithExtractedValues = Table.AddColumn(
        WithTempText,
        "Extracted Parts",
        each
            if [Hierarchy Name] = null and [TempKeyText] <> null then
                let
                    txt = Text.Trim([TempKeyText]),
                    replaced = Text.Replace(txt, " | ", "|"),
                    splitted = Text.Split(replaced, "|"),
                    splittedCount = List.Count(splitted)
                in
                    if splittedCount = 2 then
                        {
                            Text.Trim(splitted{0}),
                            Text.Trim(splitted{1})
                        }
                    else
                        {
                            txt,
                            txt
                        }
            else
                null
    ),
    WithFinalHierarchy = Table.AddColumn(
        WithExtractedValues,
        "Final Hierarchy Name",
        each
            if [Hierarchy Name] = null and [Extracted Parts] <> null then
                let
                    parts = [Extracted Parts]
                in
                    if List.Count(parts) > 0 
                    then parts{0} 
                    else null
            else
                [Hierarchy Name]
    ),
    WithFinalValue = Table.AddColumn(
        WithFinalHierarchy,
        "Final Value",
        each
            if [Value] = null and [Extracted Parts] <> null then
                let
                    parts = [Extracted Parts],
                    partsCount = List.Count(parts)
                in
                    if partsCount > 1 
                    then parts{1} 
                    else parts{0}
            else
                [Value]
    ),
    RemovedTemp = Table.RemoveColumns(
        WithFinalValue,
        {
            "Hierarchy Name",
            "Value",
            "Extracted Parts",
            "TempKeyText",
            "XRP KEY"
        }
    ),
    RenamedFinal = Table.RenameColumns(
        RemovedTemp,
        {
            {"Final Hierarchy Name", "Hierarchy Name"},
            {"Final Value", "Value"}
        }
    ),
    WithDimension = Table.AddColumn(
        RenamedFinal,
        "Dimension",
        each
            let
                matchingRows = Table.SelectRows(
                    Hierarchy_Matrix,
                    (h) => h[Hierarchy Name] = [Hierarchy Name]
                ),
                dimensionValue = 
                    if Table.RowCount(matchingRows) > 0 
                    then matchingRows{0}[Dimension] 
                    else null
            in
                dimensionValue
    ),
    WithStatus = Table.AddColumn(
        WithDimension,
        "Status",
        each
            let
                svP = if [SmartView Parent] = null then "" else [SmartView Parent],
                xrpP = if [XRP Parent] = null then "" else [XRP Parent]
            in
                if svP = "" and xrpP = "" then
                    "Parent match"
                else if svP = "" and xrpP <> "" then
                    "Missing in SmartView"
                else if svP <> "" and xrpP = "" then
                    "Missing in XRP"
                else if svP <> xrpP then
                    "Parent mismatch"
                else
                    "Parent match"
    ),
    FinalColumns = Table.SelectColumns(
        WithStatus,
        {
            "KEY",
            "Hierarchy Name",
            "Value",
            "SmartView Parent",
            "XRP Parent",
            "Status",
            "SmartView Path",
            "XRP Path",
            "Dimension"
        }
    ),
    RemoveMatches = Table.SelectRows(FinalColumns, each [Status] <> "Parent match")
in
    RemoveMatches
